openapi: 3.0.3
info:
  version: v2beta
  title: StabilityAI REST API
  description: |-
    Welcome to the Stability Platform API. As of March 2024, we are building the REST v2beta API service to be the primary API service for the Stability Platform.
    All AI services on other APIs (gRPC, REST v1, RESTv2alpha) will continue to be maintained, however they will not receive
    new features or parameters.

    If you are a REST v2alpha user, we strongly recommend that you adjust the URL calls for the specific services that you are using over to the equivalent REST v2beta URL. Normally, this means simply replacing "v2alpha" with "v2beta". We are not deprecating v2alpha URLs at this time for users that are currently using them.

    #### Authentication

    You will need your [Stability API key](https://platform.stability.ai/account/keys) in order to make requests to this API.
    Make sure you never share your API key with anyone, and you never commit it to a public repository. Include this key in
    the `Authorization` header of your requests.

    #### Rate limiting

    This API is rate-limited to 150 requests every 10 seconds. If you exceed this limit, you will receive a `429` response
    and be timed out for 60 seconds. If you find this limit too restrictive, please reach out to us via [this form](https://stabilityplatform.freshdesk.com/support/home).

    #### Support

    Please see our [FAQ](https://platform.stability.ai/faq) for answers to common questions. If you have any other questions or concerns,
    please reach out to us via [this form](https://stabilityplatform.freshdesk.com/support/tickets/new).

    To see the health of our APIs, please check our [Status Page](https://stabilityai.instatus.com/).
  x-marketplace-tags:
    - name: Featured
      description: Featured APIs are hand-picked for display purposes.
servers:
  - url: https://api.stability.ai
security:
  - STABILITY_API_KEY: []
tags:
  - name: Edit
    description: |-
      Tools for editing your own and generated images.

      **[Erase](/docs/api-reference#tag/Edit/paths/~1v2beta~1stable-image~1edit~1erase/post)**

      The Erase service removes unwanted objects, such as blemishes on portraits or items on desks, using image masks.

      **[Outpaint](/docs/api-reference#tag/Edit/paths/~1v2beta~1stable-image~1edit~1outpaint/post)**

      The outpaint service inserts additional content in an image to fill in the space in any direction, allowing you to "zoom-out" of an image.

      **[Inpaint](/docs/api-reference#tag/Edit/paths/~1v2beta~1stable-image~1edit~1inpaint/post)**

      The Inpaint service modifies images by filling in or replacing specified areas with new content based on the content of a "mask" image.

      **[Search and Replace](/docs/api-reference#tag/Edit/paths/~1v2beta~1stable-image~1edit~1search-and-replace/post)**

      The Search and Replace service, similar to inpaint, allows to replace specified areas with new content, but this time with the help of a prompt instead of a mask. The service will automatically segment the object and replace it with the object requested in the prompt.

      **[Search and Recolor](/docs/api-reference#tag/Edit/paths/~1v2beta~1stable-image~1edit~1search-and-recolor/post)**

      The Search and Recolor service is another derivative of the inpaint service and provides the ability to change the color of a specific object in an image using a prompt. The Search and Recolor service will automatically segment the object and recolor it using the colors requested in the prompt.

      **[Remove Background](/docs/api-reference#tag/Edit/paths/~1v2beta~1stable-image~1edit~1remove-background/post)**

      The Remove Background service accurately segments the foreground from an image to removes the background.
  - name: Upscale
    description: |-
      Tools for increasing the size and resolution of your existing images.

      **[Fast Upscaler](/docs/api-reference#tag/Upscale/paths/~1v2beta~1stable-image~1upscale~1fast/post)**

      This service enhances image resolution by 4x using predictive and generative AI. This lightweight and fast service (processing in ~1 second) is ideal for enhancing the quality of compressed images, making it suitable for social media posts and other applications.

      **[Conservative Upscaler](/docs/api-reference#tag/Upscale/paths/~1v2beta~1stable-image~1upscale~1conservative/post)**

      This service can upscale images by 20 to 40 times up to a 4 megapixel output image with minimal alteration to the original image. The Conservative Upscaler can upscale images as small as 64x64 pixels directly to a 4 megapixel output. Use this option if you directly need a 4 megapixel output.

      **[Creative Upscaler](/docs/api-reference#tag/Upscale/paths/~1v2beta~1stable-image~1upscale~1creative/post)**

      The service can upscale highly degraded images (lower than 1 megapixel) with a creative twist to provide high resolution results.
  - name: Generate
    description: |-
      Tools to generate new images from text, or create variations of existing images. Our different services include:

      **[Stable Image Ultra](/docs/api-reference#tag/Generate/paths/~1v2beta~1stable-image~1generate~1ultra/post)**: Photorealistic, Large-Scale Output

      Our state of the art text to image model based on Stable Diffusion 3.5. Stable Image Ultra Produces the highest quality, photorealistic outputs perfect for professional print media and large format applications. Stable Image Ultra excels at rendering exceptional detail and realism.

      **[Stable Image Core](/docs/api-reference#tag/Generate/paths/~1v2beta~1stable-image~1generate~1core/post)**: Fast and Affordable

      Optimized for fast and aï¬€ordable image generation, great for rapidly iterating on concepts during ideation. Stable Image Core is the next generation model following Stable Diffusion XL.

      **[Stable Diffusion 3 & 3.5 Model Suite](/docs/api-reference#tag/Generate/paths/~1v2beta~1stable-image~1generate~1sd3/post)**: Stability AI's latest base models

      The different versions of our open models are available via API, letting you test and adjust speed and quality based on your use case. All model versions strike a balance between generation speed and output quality and are ideal for creating high-volume, high-quality digital assets like websites, newsletters, and marketing materials.
  - name: Control
    description: |-
      Tools for generating precise, controlled variations of existing images or sketches.

      **[Sketch](/docs/api-reference#tag/Control/paths/~1v2beta~1stable-image~1control~1sketch/post)**

      This service upgrades sketches to refined outputs with precise control. For non-sketch images, it allows detailed manipulation of the final appearance by leveraging the contour lines and edges within the image.

      **[Structure](/docs/api-reference#tag/Control/paths/~1v2beta~1stable-image~1control~1structure/post)**

      This service excels in generating images by maintaining the structure of an input image, making it especially valuable for advanced content creation scenarios such as recreating scenes or rendering characters from models.

      **[Style](/docs/api-reference#tag/Control/paths/~1v2beta~1stable-image~1control~1style/post)**

      This service extracts stylistic elements from an input image (control image) and uses it to guide the creation of an output image based on the prompt. The result is a new image in the same style as the control image.
  - name: Results
    description: Tools for fetching the results of your async generations.
  - name: User
    description: Manage your Stability account, and view account/organization balances.
  - name: Engines
    description: Enumerate engines that work with 'Version 1' REST API endpoints.
  - name: SDXL 1.0 & SD1.6
    description: Generate images using SDXL 1.0 or SD1.6.
paths:
  /v2alpha/generation/image-to-video:
    post:
      tags:
        - v2alpha/generation
      summary: image-to-video
      description: |-
        Generate a short video based on an initial image with [Stable Video Diffusion](https://static1.squarespace.com/static/6213c340453c3f502425776e/t/655ce779b9d47d342a93c890/1700587395994/stable_video_diffusion.pdf),
        a latent video diffusion model. 



        ### How to generate a video
        Video generations are asynchronous, so after starting a generation use the `id` returned in the response to poll [/v2alpha/generation/image-to-video/result/{id}](#tag/v2alphageneration/paths/~1v2alpha~1generation~1image-to-video~1result~1%7Bid%7D/get) for results.

        ### Price
        Flat rate of 20 cents per generation.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2alpha/generation/image-to-video",
                headers={"authorization": f"Bearer sk-MYAPIKEY"},
                files={"image": open("./kittens-in-space.png", "rb")},
                data={
                    "seed": 0,
                    "cfg_scale": 1.8,
                    "motion_bucket_id": 127
                },
            )

            print("Generation ID:", response.json().get('id'))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const data = new FormData();
            data.append("image", fs.readFileSync("./image.png"), "image.png");
            data.append("seed", 0);
            data.append("cfg_scale", 1.8);
            data.append("motion_bucket_id", 127);

            const response = await axios.request({
              url: `https://api.stability.ai/v2alpha/generation/image-to-video`,
              method: "post",
              validateStatus: undefined,
              headers: {
                authorization: `Bearer sk-MYAPIKEY`,
                ...data.getHeaders(),
              },
              data: data,
            });

            console.log("Generation ID:", response.data.id);
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2alpha/generation/image-to-video" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -F image=@"./image.png" \
              -F seed=0 \
              -F cfg_scale=1.8 \
              -F motion_bucket_id=127 \
              -o "./output.json"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageToVideoRequest'
      responses:
        '200':
          description: Video generation started. Poll for results using the `id` in the response [here](#tag/v2alphageneration/paths/~1v2alpha~1generation~1image-to-video~1result~1%7Bid%7D/get).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                required:
                  - id
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2alpha/generation/image-to-video/result/{id}:
    get:
      tags:
        - v2alpha/generation
      summary: image-to-video/result
      description: |-
        Fetch the result of an image-to-video generation by ID. Make sure you use the same API key that you used to
        generate the video, otherwise you will receive a `404` response.

        ### How is progress reported?
        Your generation is either `in-progress` (i.e. status code `202`) or it is complete (i.e. status code `200`). 
        We may add more fine-grained progress reporting in the future (e.g. a numerical progress).

        ### How long are results stored?
        Results are stored for 24 hours after generation. After that, the results are deleted and you will need to 
        re-generate your video.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            generation_id = "e52772ac75b..."

            response = requests.request(
                "GET",
                f"https://api.stability.ai/v2alpha/generation/image-to-video/result/{generation_id}",
                headers={
                    'Accept': "video/*",  # Use 'application/json' to receive base64 encoded JSON
                    'authorization': f"Bearer sk-MYAPIKEY"
                },
            )

            if response.status_code == 202:
                print("Generation in-progress, try again in 10 seconds.")
            elif response.status_code == 200:
                print("Generation complete!")
                with open("video.mp4", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import fs from "node:fs";

            const generationID = "e52772ac75b...";

            const response = await axios.request({
              url: `https://api.stability.ai/v2alpha/generation/image-to-video/result/${generationID}`,
              method: "GET",
              validateStatus: undefined,
              responseType: "arraybuffer",
              headers: {
                accept: "video/*", // Use 'application/json' to receive base64 encoded JSON
                authorization: `Bearer sk-MYAPIKEY`,
              },
            });

            if (response.status === 202) {
              console.log("Generation is still running, try again in 10 seconds.");
            } else if (response.status === 200) {
              console.log("Generation is complete!");
              fs.writeFileSync("video.mp4", Buffer.from(response.data));
            } else {
              throw new Error(`Response ${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            generation_id="e52772ac75b..."
            url="https://api.stability.ai/v2alpha/generation/image-to-video/result/$generation_id"
            http_status=$(curl -sS -f -o "./output.mp4" -w '%{http_code}' -H "authorization: sk-MYAPIKEY" -H 'accept: video/*' "$url")

            case $http_status in
                202)
                    echo "Still processing. Retrying in 10 seconds..."
                    ;;
                200)
                    echo "Download complete!"
                    ;;
                4*|5*)
                    mv "./output.mp4" "./error.json"
                    echo "Error: Check ./error.json for details."
                    exit 1
                    ;;
            esac
      parameters:
        - schema:
            $ref: '#/components/schemas/GenerationID'
          required: true
          name: id
          in: path
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            default: video/*
            description: Specify `video/*` to get the video bytes directly. Otherwise specify `application/json` to receive the video as base64 encoded JSON.
            enum:
              - video/*
              - application/json
          required: false
          name: accept
          in: header
      responses:
        '200':
          description: The result of your video generation.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated video.

                 To receive the bytes of the video directly, specify `video/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                mp4:
                  description: raw bytes
                  value: video/mp4
                mp4JSON:
                  description: base64 encoded
                  value: application/json; type=video/mp4
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and one or more frames have been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            video/mp4:
              schema:
                type: string
                description: |-
                  The bytes of the generated video.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated mp4
            application/json; type=video/mp4:
              schema:
                type: object
                properties:
                  video:
                    type: string
                    description: The generated video, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and one or more frames have been blurred as a result.
                    example: SUCCESS
                required:
                  - video
                  - finish_reason
        '202':
          description: Your image-to-video generation is still in-progress.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                  status:
                    type: string
                    enum:
                      - in-progress
                    description: The status of your generation.
                required:
                  - id
                  - status
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '404':
          description: 'id: the generation either does not exist or has expired.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2bca35116bc5431d6dc4b4ea2ef3da2f
                  name: generation_not_found
                  errors:
                    - 'id: the generation either does not exist or has expired.'
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2alpha/generation/stable-image/upscale:
    post:
      tags:
        - v2alpha/generation
      summary: stable-image/upscale
      description: |-
        Takes images between 64x64 and 1 megapixel and upscales them all the way to **4K** resolution.  Put more 
        generally, it can upscale images ~20-40x times while preserving, and often enhancing, quality.

        ### How to use
          - Invoke this endpoint with the required parameters to start a generation
          - Use that `id` in the response to poll for results at the [upscale/result/{id}](#tag/v2alphageneration/paths/~1v2alpha~1generation~1stable-image~1upscale~1result~1%7Bid%7D/get) endpoint
            - Rate-limiting or other errors may occur if you poll more than once every 10 seconds
            
        ### Price
        Flat rate of 25 cents per generation.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2alpha/generation/stable-image/upscale",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY"
                },
                files={
                    "image": open("./kitten-in-space.png", "rb")
                },
                data={
                    "prompt": "cute fluffy white kitten floating in space, pastel colors",
                    "output_format": "webp",
                },
            )

            print("Generation ID:", response.json().get('id'))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const formData = {
              image: fs.createReadStream("./kitten-in-space.png"),
              prompt: "cute fluffy white kitten floating in space, pastel colors",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2alpha/generation/stable-image/upscale`,
              axios.toFormData(formData, new FormData()),
              {
                validateStatus: undefined,
                headers: { Authorization: `Bearer sk-MYAPIKEY` },
              },
            );

            console.log("Generation ID:", response.data.id);
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2alpha/generation/stable-image/upscale" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -F image=@"./kitten-in-rainforest.png" \
              -F prompt="cute fluffy white kitten sitting in a rainforest, pastel colors" \
              -F output_format=webp \
              -o "./output.json"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image you wish to upscale.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 1,048,576 pixels
                  format: binary
                  example: ./some/image.png
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                creativity:
                  type: number
                  minimum: 0.1
                  maximum: 0.5
                  default: 0.3
                  description: |-
                    Indicates how creative the model should be when upscaling an image.
                    Higher values will result in more details being added to the image during upscaling.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
              required:
                - image
                - prompt
      responses:
        '200':
          description: Upscaling was successful!
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                required:
                  - id
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2alpha/generation/stable-image/upscale/result/{id}:
    get:
      tags:
        - v2alpha/generation
      summary: stable-image/upscale/result
      description: |-
        Fetch the result of an upscale generation by ID. Make sure to use the same API key to fetch the generation result
        that you used to create the generation, otherwise you will receive a `404` response.

        ### How is progress reported?
        Your generation is either `in-progress` (i.e. status code `202`) or it is complete (i.e. status code `200`). 
        We may add more fine-grained progress reporting in the future (e.g. a numerical progress).

        ### How long are results stored?
        Results are stored for 24 hours after generation. After that, the results are deleted.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            generation_id = "e52772ac75b..."

            response = requests.request(
                "GET",
                f"https://api.stability.ai/v2alpha/generation/stable-image/upscale/result/{generation_id}",
                headers={
                    'Accept': "image/*",  # Use 'application/json' to receive base64 encoded JSON
                    'authorization': f"Bearer sk-MYAPIKEY"
                },
            )

            if response.status_code == 202:
                print("Generation in-progress, try again in 10 seconds.")
            elif response.status_code == 200:
                print("Generation complete!")
                with open("upscaled.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import fs from "node:fs";

            const generationID = "e52772ac75b...";

            const response = await axios.request({
              url: `https://api.stability.ai/v2alpha/generation/stable-image/upscale/result/${generationID}`,
              method: "GET",
              validateStatus: undefined,
              responseType: "arraybuffer",
              headers: {
                accept: "image/*", // Use 'application/json' to receive base64 encoded JSON
                authorization: `Bearer sk-MYAPIKEY`,
              },
            });

            if (response.status === 202) {
              console.log("Generation is still running, try again in 10 seconds.");
            } else if (response.status === 200) {
              console.log("Generation is complete!");
              fs.writeFileSync("upscaled.webp", Buffer.from(response.data));
            } else {
              throw new Error(`Response ${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            generation_id="e52772ac75b..."
            url="https://api.stability.ai/v2alpha/generation/stable-image/upscale/result/$generation_id"
            http_status=$(curl -sS -f -o "./upscaled.webp" -w '%{http_code}' -H "authorization: sk-MYAPIKEY" -H 'accept: image/*' "$url")

            case $http_status in
                202)
                    echo "Still processing. Retrying in 10 seconds..."
                    ;;
                200)
                    echo "Download complete!"
                    ;;
                4*|5*)
                    mv "./upscaled.webp" "./error.json"
                    echo "Error: Check ./error.json for details."
                    exit 1
                    ;;
            esac
      parameters:
        - schema:
            $ref: '#/components/schemas/GenerationID'
          required: true
          name: id
          in: path
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to get the image bytes directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
      responses:
        '200':
          description: The upscale was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '202':
          description: Your upscale generation is still in-progress.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                  status:
                    type: string
                    enum:
                      - in-progress
                    description: The status of your generation.
                required:
                  - id
                  - status
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '404':
          description: 'id: the generation either does not exist or has expired.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2bca35116bc5431d6dc4b4ea2ef3da2f
                  name: generation_not_found
                  errors:
                    - 'id: the generation either does not exist or has expired.'
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2alpha/generation/stable-image/inpaint:
    post:
      tags:
        - v2alpha/generation
      summary: stable-image/inpaint
      description: |-
        Inpaint an existing image, with or without a mask, using our latest-and-greatest inpainting model.

        ### Search-and-Replace Mode
        This mode is ideal for individuals of all levels of skill in design. It can be used for straightforward 
        adjustments to images. The service will automatically mask the most appropriate object based on the contents
        of the `search_prompt`, and replace it with a generated result based on the `prompt`.

        **How to use:** set the `mode` parameter to `search` and provide a short description of what to 
        search-and-replace in the `search_prompt` parameter.

        ### Mask Mode
        This mode allows for precise control of generative fill tasks on an image, down to the level of 
        individual pixels. Design professionals can provide a `mask` for the section of the image to be replaced, 
        and use standard image prompting to describe the full image as it should appear after the editing. 
        The resulting image will incorporate all of the elements described in the `prompt`.

        **How to use:** set the `mode` parameter to `mask` and either pass in an `image` with an alpha channel 
        or provide an explicit mask image to the `mask` parameter. If both are present the `mask` parameter will
        take precedence.

        ### Price
        - Requests with `mode` set to `search` cost 4 cents.
        - Requests with `mode` set to `mask` cost 3 cents.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2alpha/generation/stable-image/inpaint",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY"
                },
                files={
                    "image": open("./husky-in-a-field.png", "rb")
                },
                data={
                    "prompt": "golden retriever in a field",
                    "mode": "search",
                    "search_prompt": "dog",
                    "output_format": "webp",
                },
            )

            if response.status_code == 200:
                with open("./golden-retriever-in-a-field.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const formData = {
              image: fs.createReadStream("./husky-in-a-field.png"),
              prompt: "golden retriever standing in a field",
              mode: "search",
              search_prompt: "dog",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2alpha/generation/stable-image/inpaint`,
              axios.toFormData(formData, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { Authorization: `Bearer sk-MYAPIKEY`, accept: "image/*" },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./golden-retriever-in-a-field.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2alpha/generation/stable-image/inpaint" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./husky-in-a-field.png" \
              -F prompt="golden retriever in a field" \
              -F mode="search" \
              -F search_prompt="dog" \
              -F output_format="webp" \
              -o "./golden-retriever-in-a-field.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to get the image bytes directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/InpaintingSearchModeRequestBody'
                - $ref: '#/components/schemas/InpaintingMaskingModeRequestBody'
              discriminator:
                propertyName: mode
                mapping:
                  search: '#/components/schemas/InpaintingSearchModeRequestBody'
                  mask: '#/components/schemas/InpaintingMaskingModeRequestBody'
      responses:
        '200':
          description: Inpainting was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/image-to-video:
    post:
      tags:
        - Image-to-Video
      summary: Start generation
      description: |-
        Generate a short video based on an initial image with [Stable Video Diffusion](https://static1.squarespace.com/static/6213c340453c3f502425776e/t/655ce779b9d47d342a93c890/1700587395994/stable_video_diffusion.pdf),
        a latent video diffusion model. 



        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`.

        The body of the request should include:
        - `image`

        The body may optionally include:
        - `seed`
        - `cfg_scale`
        - `motion_bucket_id`

        > **Note:** for more details about these parameters please see the request schema below.

        After invoking this endpoint with the required parameters, use the `id` in the response to poll for results at the
        [image-to-video/result/{id}](#tag/Image-to-Video/paths/~1v2beta~1image-to-video~1result~1%7Bid%7D/get) endpoint.  Rate-limiting or other errors may occur if you poll more than once every 10 seconds.

        ### Credits
        Flat rate of 20 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/image-to-video",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY"
                },
                files={
                    "image": open("./kittens-in-space.png", "rb")
                },
                data={
                    "seed": 0,
                    "cfg_scale": 1.8,
                    "motion_bucket_id": 127
                },
            )

            print("Generation ID:", response.json().get('id'))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const data = new FormData();
            data.append("image", fs.readFileSync("./image.png"), "image.png");
            data.append("seed", 0);
            data.append("cfg_scale", 1.8);
            data.append("motion_bucket_id", 127);

            const response = await axios.request({
              url: `https://api.stability.ai/v2beta/image-to-video`,
              method: "post",
              validateStatus: undefined,
              headers: {
                authorization: `Bearer sk-MYAPIKEY`,
                ...data.getHeaders(),
              },
              data: data,
            });

            console.log("Generation ID:", response.data.id);
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/image-to-video" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -F image=@"./image.png" \
              -F seed=0 \
              -F cfg_scale=1.8 \
              -F motion_bucket_id=127 \
              -o "./output.json"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageToVideoRequest'
      responses:
        '200':
          description: Video generation started. Poll for results using the `id` in the response [here](#tag/Image-to-Video/paths/~1v2beta~1image-to-video~1result~1%7Bid%7D/get).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                required:
                  - id
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/image-to-video/result/{id}:
    get:
      tags:
        - Image-to-Video
      summary: Fetch generation result
      description: |-
        Fetch the result of an image-to-video generation by ID.

        Make sure to use the same API key to fetch the generation result that you used to create the generation,
        otherwise you will receive a `404` response.

        ### How to use
        Please invoke this endpoint with a `GET` request.

        The headers of the request must include an API key in the `authorization` field and the ID
        of your generation must be in the path.

        ### How is progress reported?
        Your generation is either `in-progress` (i.e. status code `202`) or it is complete (i.e. status code `200`).
        We may add more fine-grained progress reporting in the future (e.g. a numerical progress).

        ### How long are results stored?
        Results are stored for 24 hours after generation. After that, the results are deleted and you will need to
        re-generate your video.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            generation_id = "e52772ac75b..."

            response = requests.request(
                "GET",
                f"https://api.stability.ai/v2beta/image-to-video/result/{generation_id}",
                headers={
                    'accept': "video/*",  # Use 'application/json' to receive base64 encoded JSON
                    'authorization': f"Bearer sk-MYAPIKEY"
                },
            )

            if response.status_code == 202:
                print("Generation in-progress, try again in 10 seconds.")
            elif response.status_code == 200:
                print("Generation complete!")
                with open("video.mp4", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import fs from "node:fs";

            const generationID = "e52772ac75b...";

            const response = await axios.request({
              url: `https://api.stability.ai/v2beta/image-to-video/result/${generationID}`,
              method: "GET",
              validateStatus: undefined,
              responseType: "arraybuffer",
              headers: {
                Authorization: `Bearer sk-MYAPIKEY`,
                Accept: "video/*", // Use 'application/json' to receive base64 encoded JSON
              },
            });

            if (response.status === 202) {
              console.log("Generation is still running, try again in 10 seconds.");
            } else if (response.status === 200) {
              console.log("Generation is complete!");
              fs.writeFileSync("video.mp4", Buffer.from(response.data));
            } else {
              throw new Error(`Response ${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            generation_id="e52772ac75b..."
            url="https://api.stability.ai/v2beta/image-to-video/result/$generation_id"
            http_status=$(curl -sS -f -o "./output.mp4" -w '%{http_code}' -H "authorization: sk-MYAPIKEY" -H 'accept: video/*' "$url")

            case $http_status in
                202)
                    echo "Still processing. Retrying in 10 seconds..."
                    ;;
                200)
                    echo "Download complete!"
                    ;;
                4*|5*)
                    mv "./output.mp4" "./error.json"
                    echo "Error: Check ./error.json for details."
                    exit 1
                    ;;
            esac
      parameters:
        - schema:
            $ref: '#/components/schemas/GenerationID'
          required: true
          name: id
          in: path
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            default: video/*
            description: Specify `video/*` to receive the bytes of the video directly. Otherwise specify `application/json` to receive the video as base64 encoded JSON.
            enum:
              - video/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      responses:
        '200':
          description: The result of your video generation.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated video.

                 To receive the bytes of the video directly, specify `video/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                mp4:
                  description: raw bytes
                  value: video/mp4
                mp4JSON:
                  description: base64 encoded
                  value: application/json; type=video/mp4
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and one or more frames have been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            video/mp4:
              schema:
                type: string
                description: |-
                  The bytes of the generated video.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated mp4
            application/json; type=video/mp4:
              schema:
                type: object
                properties:
                  video:
                    type: string
                    description: The generated video, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and one or more frames have been blurred as a result.
                    example: SUCCESS
                required:
                  - video
                  - finish_reason
        '202':
          description: Your image-to-video generation is still in-progress.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                  status:
                    type: string
                    enum:
                      - in-progress
                    description: The status of your generation.
                required:
                  - id
                  - status
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '404':
          description: 'id: the generation either does not exist or has expired.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2bca35116bc5431d6dc4b4ea2ef3da2f
                  name: generation_not_found
                  errors:
                    - 'id: the generation either does not exist or has expired.'
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/3d/stable-fast-3d:
    post:
      tags:
        - 3D
      summary: Stable Fast 3D
      description: |-
        Stable Fast 3D generates high-quality 3D assets from a single 2D input image.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_3D_API.ipynb)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`.

        The body of the request should include:
        - `image`

        The body may optionally include:
        - `texture_resolution`
        - `foreground_ratio`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The output is a binary blob that includes a glTF asset, including JSON, buffers, and images. 
        See the [GLB File Format Specification](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#glb-file-format-specification) for more details.

        ### Credits
        Flat rate of 2 credits per successful generation. You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/3d/stable-fast-3d",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                },
                files={
                    "image": open("./cat-statue.png", "rb")
                },
                data={},
            )

            if response.status_code == 200:
                with open("./3d-cat-statue.glb", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import FormData from "form-data";
            import fs from "node:fs";

            const payload = {
                image: fs.createReadStream("./cat-statue.png"),
            };

            const response = await axios.postForm(
                `https://api.stability.ai/v2beta/3d/stable-fast-3d`,
                axios.toFormData(payload, new FormData()),
                {
                    validateStatus: undefined,
                    responseType: "arraybuffer",
                    headers: {
                        Authorization: `Bearer sk-MYAPIKEY`,
                    },
                },
            );

            if (response.status === 200) {
                fs.writeFileSync("./3d-cat-statue.glb", Buffer.from(response.data));
            } else {
                throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/3d/stable-fast-3d" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -F image=@"./cat-statue.png" \
              -o "./3d-cat-statue.glb"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image to generate a 3D model from.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 4,194,304 pixels
                  format: binary
                  example: ./some/image.png
                texture_resolution:
                  type: string
                  enum:
                    - '512'
                    - '1024'
                    - '2048'
                  default: '1024'
                  description: |-
                    Determines the resolution of the textures used for both the albedo (color) map
                    and the normal map. The resolution is specified in pixels, and a higher value
                    corresponds to a higher level of detail in the textures, allowing for more
                    intricate and precise rendering of surfaces. However, increasing the resolution
                    also results in larger asset sizes, which may impact loading times and
                    performance. 1024 is a good default value and rarely requires changing.
                foreground_ratio:
                  type: number
                  minimum: 0.1
                  maximum: 1
                  default: 0.85
                  description: |-
                    Controls the amount of padding around the object to be processed within the frame.
                    This ratio determines the relative size of the object compared to the total frame
                    size. A higher ratio means less padding and a larger object, while a lower ratio
                    increases the padding, effectively reducing the objectâ€™s size within the frame. This
                    can be useful when a long and narrow object, such as a car or bus, is viewed from the
                    front (the narrow side). Here, lowering the foreground ratio might help prevent the
                    generated 3D assets from appearing squished or distorted. The default value of 0.85 
                    is good for most objects.
                remesh:
                  type: string
                  enum:
                    - none
                    - triangle
                    - quad
                  default: none
                  description: |-
                    Controls the remeshing algorithm used to generate the 3D model. The remeshing
                    algorithm determines how the 3D model is constructed from the input image. The
                    default value of "none" means that the model is generated without remeshing,
                    which is suitable for most use cases. The "triangle" option generates a model
                    with triangular faces, while the "quad" option generates a model with quadrilateral
                    faces. The "quad" option is useful when the 3D model will be used in DCC tools such
                    as Maya or Blender.
                vertex_count:
                  type: number
                  minimum: -1
                  maximum: 20000
                  default: -1
                  description: |-
                    If specified, the result will have approximately this many vertices (and consequently fewer faces) in the simplified mesh. 

                    Setting this value to -1 (the default value) means that a limit is not set.
              required:
                - image
      responses:
        '200':
          description: Generation was successful.
          headers:
            content-type:
              description: The format of the 3D model.
              schema:
                type: string
                example: model/gltf-binary
          content:
            model/gltf-binary:
              schema:
                type: string
                description: The bytes of the generated 3D model.
                format: binary
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/3d/stable-point-aware-3d:
    post:
      tags:
        - 3D
      summary: Stable Point Aware 3D
      description: |-
        Stable Point Aware 3D (SPAR3D) can make real-time edits and create the complete structure 
        of a 3D object from a single image in a few seconds. SPAR3D combines the strengths of 
        point-cloud diffusion (probabilistic) and mesh regression (deterministic) to have improved 
        details on the unseen back regions in the input image. 

        Compared to our previous model [Stable Fast 3D](#tag/3D/paths/~1v2beta~13d~1stable-fast-3d/post), this new 
        one allows editing of backside information using the point cloud representation and also 
        leverages a larger Diffusion model to generally improve the depth and backside 
        predictions.

        Read more about the model capabilities [here](https://bit.ly/4h7cpgF). 

        This API is currently in 
        preview. Please donâ€™t hesitate to [contact us](https://stability.ai/contact) with any questions. 

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_3D_API.ipynb)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`.

        The body of the request should include:
        - `image`

        The body may optionally include:
        - `texture_resolution`
        - `foreground_ratio`
        - `remesh`
        - `target_type`
        - `target_count`
        - `guidance_scale`
        - `seed`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The output is a binary blob that includes a glTF asset, including JSON, buffers, and images. 
        See the [GLB File Format Specification](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#glb-file-format-specification) for more details.

        ### Credits
        Flat rate of 4 credits per successful generation. You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/3d/stable-point-aware-3d",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                },
                files={
                    "image": open("./cat-statue.png", "rb")
                },
                data={},
            )

            if response.status_code == 200:
                with open("./3d-cat-statue.glb", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import FormData from "form-data";
            import fs from "node:fs";

            const payload = {
                image: fs.createReadStream("./cat-statue.png"),
            };

            const response = await axios.postForm(
                `https://api.stability.ai/v2beta/3d/stable-point-aware-3d`,
                axios.toFormData(payload, new FormData()),
                {
                    validateStatus: undefined,
                    responseType: "arraybuffer",
                    headers: {
                        Authorization: `Bearer sk-MYAPIKEY`,
                    },
                },
            );

            if (response.status === 200) {
                fs.writeFileSync("./3d-cat-statue.glb", Buffer.from(response.data));
            } else {
                throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/3d/stable-point-aware-3d" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -F image=@"./cat-statue.png" \
              -o "./3d-cat-statue.glb"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image to generate a 3D model from.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 4,194,304 pixels
                  format: binary
                  example: ./some/image.png
                texture_resolution:
                  type: string
                  enum:
                    - '512'
                    - '1024'
                    - '2048'
                  default: '1024'
                  description: |-
                    Determines the resolution of the textures used for both the albedo (color) map and the 
                    normal map. The resolution is specified in pixels, and a higher value corresponds to a 
                    higher level of detail in the textures, allowing for more intricate and precise rendering 
                    of surfaces. However, increasing the resolution also results in larger asset sizes, which 
                    may impact loading times and performance. `1024` is a good default value and rarely requires 
                    changing.
                foreground_ratio:
                  type: number
                  minimum: 1
                  maximum: 2
                  default: 1.3
                  description: |-
                    Controls the amount of padding around the object to be processed within the frame. This 
                    ratio determines the relative size of the object compared to the total frame size. A 
                    higher ratio means less padding and a larger object, while a lower ratio increases the 
                    padding, effectively reducing the objectâ€™s size within the frame. This can be useful when 
                    a long and narrow object, such as a car or bus, is viewed from the front (the narrow 
                    side). Here, lowering the foreground ratio might help prevent the generated 3D assets from 
                    appearing squished or distorted. The default value of `1.3` is good for most objects.
                remesh:
                  type: string
                  enum:
                    - none
                    - triangle
                    - quad
                  default: none
                  description: |-
                    Controls the remeshing algorithm used to generate the 3D model. The remeshing algorithm 
                    determines how the 3D model is constructed from the input image. The default value of 
                    "none" means that the model is generated without remeshing, which is suitable for most use 
                    cases. The "triangle" option generates a model with triangular faces, while the "quad" 
                    option generates a model with quadrilateral faces. The "quad" option is useful when the 3D 
                    model will be used in DCC tools such as Maya or Blender.
                target_type:
                  type: string
                  enum:
                    - none
                    - vertex
                    - face
                  default: none
                  description: |-
                    If set to `vertex` or `face`, the result will have approximately `target_count` many vertices or 
                    faces in the simplified mesh, respectively.
                target_count:
                  type: number
                  minimum: 100
                  maximum: 20000
                  default: 1000
                  description: |-
                    This sets the target vertex or face count defined by `target_type`. Selecting extremely low 
                    counts reduces the quality of the mesh severely and values of 1,000 - 10,000 are recommended.
                guidance_scale:
                  type: number
                  minimum: 1
                  maximum: 10
                  default: 3
                  description: |-
                    This sets the guidance scaling of the point diffusion module. Lower values produce less 
                    detail and higher can introduce artifacts. The default of `3` produces best results.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
              required:
                - image
      responses:
        '200':
          description: Generation was successful.
          headers:
            content-type:
              description: The format of the 3D model.
              schema:
                type: string
                example: model/gltf-binary
          content:
            model/gltf-binary:
              schema:
                type: string
                description: The bytes of the generated 3D model.
                format: binary
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/results/{id}:
    get:
      tags:
        - Results
      summary: Fetch async generation result
      description: |-
        Fetch the result of a generation by ID. 

        Make sure to use the same API key to fetch the generation result that you used to create the generation, 
        otherwise you will receive a `404` response.

        ### How to use
        Please invoke this endpoint with a `GET` request.

        The headers of the request must include an API key in the `authorization` field and the ID
        of your generation must be in the path.

        ### How is progress reported?
        Your generation is either `in-progress` (i.e. status code `202`) or it is complete (i.e. status code `200`). 
        We may add more fine-grained progress reporting in the future (e.g. a numerical progress).

        ### How long are results stored?
        Results are stored for 24 hours after generation. After that, the results are deleted.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            generation_id = "e52772ac75b..."

            response = requests.request(
                "GET",
                f"https://api.stability.ai/v2beta/results/{generation_id}",
                headers={
                    'accept': "image/*",  # Use 'application/json' to receive base64 encoded JSON
                    'authorization': f"Bearer sk-MYAPIKEY"
                },
            )

            if response.status_code == 202:
                print("Generation in-progress, try again in 10 seconds.")
            elif response.status_code == 200:
                print("Generation complete!")
                with open("result.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import fs from "node:fs";

            const generationID = "e52772ac75b...";

            const response = await axios.request({
              url: `https://api.stability.ai/v2beta/results/${generationID}`,
              method: "GET",
              validateStatus: undefined,
              responseType: "arraybuffer",
              headers: {
                Authorization: `Bearer sk-MYAPIKEY`,
                Accept: "image/*", // Use 'application/json' to receive base64 encoded JSON
              },
            });

            if (response.status === 202) {
              console.log("Generation is still running, try again in 10 seconds.");
            } else if (response.status === 200) {
              console.log("Generation is complete!");
              fs.writeFileSync("result.webp", Buffer.from(response.data));
            } else {
              throw new Error(`Response ${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            generation_id="e52772ac75b..."
            url="https://api.stability.ai/v2beta/results/$generation_id"
            http_status=$(curl -sS -f -o "./result.webp" -w '%{http_code}' -H "authorization: sk-MYAPIKEY" -H 'accept: image/*' "$url")

            case $http_status in
                202)
                    echo "Still processing. Retrying in 10 seconds..."
                    ;;
                200)
                    echo "Download complete!"
                    ;;
                4*|5*)
                    mv "./result.webp" "./error.json"
                    echo "Error: Check ./error.json for details."
                    exit 1
                    ;;
            esac
      parameters:
        - schema:
            $ref: '#/components/schemas/GenerationID'
          required: true
          name: id
          in: path
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            default: '*/*'
            description: Specify `*/*` to receive the bytes of the result directly. Otherwise specify `application/json` to receive the result as base64 encoded JSON.
            enum:
              - '*/*'
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      responses:
        '200':
          description: Generation finished.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '202':
          description: Your generation is still in-progress.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                  status:
                    type: string
                    enum:
                      - in-progress
                    description: The status of your generation.
                required:
                  - id
                  - status
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '404':
          description: 'id: the generation either does not exist or has expired.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2bca35116bc5431d6dc4b4ea2ef3da2f
                  name: generation_not_found
                  errors:
                    - 'id: the generation either does not exist or has expired.'
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/audio/stable-audio-2/text-to-audio:
    post:
      tags:
        - Stable Audio 2.0
      summary: Text-to-Audio
      description: |-
        Stable Audio 2.0 generates high-quality music and sound effects up to three minutes long at
        44.1kHz stereo from text descriptions. Learn how to craft effective prompts in our
        [Prompt Guide](https://www.stableaudio.com/user-guide/text-to-audio) to get the best results
        from your generations.

        Stable Audio 2.0 was exclusively trained on licensed data from the [AudioSparx](https://www.audiosparx.com/)
        music library, honoring opt-out requests and ensuring fair compensation for creators.
        Read more about the model capabilities [here](https://stability.ai/news/stable-audio-2-0).

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to
        [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Audio_API.ipynb)
        or try Stable Audio 2.0 for free at [stableaudio.com](https://stableaudio.com).

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`. The `accept` header should be set to one of the following:
        - `audio/*` to receive the audio in the format specified by the `output_format` parameter.
        - `application/json` to receive the audio encoded as base64 in a JSON response.

        The body of the request should include:
        - `prompt` - text to generate the audio from. Check our
        [prompt guide](https://www.stableaudio.com/user-guide/text-to-audio) for tips

        #### **Optional Parameters:**
        The body may optionally include:
        - `output_format` - the the format of the output audio
        - `seed` - the randomness seed to use for the generation
        - `steps` - the number of sampling steps
        - `duration` - the number of seconds of the generated audio
        - `cfg_scale` - controls how strictly the diffusion process adheres to the prompt text

        > **Note:** for more details about these parameters please see the request schema below.

        ### Credits
        By default, 12 credits per successful generation. The number of credits is determined
        by the following formula: `credits = 9 + 0.06 * steps`.

        Examples:
        - 50 steps = 12 credits [default]
        - 100 steps = 15 credits

        As always, you will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/audio/stable-audio-2/text-to-audio",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "audio/*"
                },
                files={"none": ''},
                data={
                    "prompt": "A song in the 3/4 time signature that features cheerful acoustic guitar, live recorded drums, and rhythmic claps, The mood is happy and up-lifting.",
                    "output_format": "mp3",
                    "duration": 20,
                    "steps": 30,
                },
            )

            if response.status_code == 200:
                with open("./output.mp3", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              prompt:
                "A song in the 3/4 time signature that features cheerful acoustic guitar, live recorded drums, and rhythmic claps, The mood is happy and up-lifting.",
              output_format: "mp3",
              duration: 20,
              steps: 30,
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/audio/stable-audio-2/text-to-audio`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: {
                  Authorization: `Bearer sk-MYAPIKEY`,
                  Accept: "audio/*",
                },
              },
            );

            if (response.status === 200) {
              fs.writeFileSync("./output.mp3", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/audio/stable-audio-2/text-to-audio" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: audio/*" \
              -F prompt="A song in the 3/4 time signature that features cheerful acoustic guitar, live recorded drums, and rhythmic claps, The mood is happy and up-lifting." \
              -F output_format="mp3" \
              -F duration="20" \
              -F steps="30" \
              -o "./uk-bass.mp3"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: audio/*
            description: Specify `audio/*` to receive the bytes of the audio directly. Otherwise specify `application/json` to receive the audio as base64 encoded JSON.
            enum:
              - audio/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    What you wish the output audio to be. A strong, descriptive prompt that clearly defines
                    instruments, moods, styles, and genre will lead to better results.

                    You can make a prompt as simple or complex as you like. Simple prompts are good for clean
                    output audio. Complex prompts are good for adding texture and depth to the output audio.

                    Check our [prompt guide](https://www.stableaudio.com/user-guide/text-to-audio) for tips.
                duration:
                  type: number
                  minimum: 1
                  maximum: 190
                  default: 190
                  description: Controls the duration in seconds of the generated audio.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                steps:
                  type: integer
                  minimum: 30
                  maximum: 100
                  default: 50
                  description: Controls the number of sampling steps.
                cfg_scale:
                  type: number
                  minimum: 1
                  maximum: 25
                  default: 7
                  description: |-
                    How strictly the diffusion process adheres to the prompt text (higher values make your
                    audio closer to your prompt).
                output_format:
                  type: string
                  enum:
                    - mp3
                    - wav
                  default: mp3
                  description: Dictates the `content-type` of the generated audio.
              required:
                - prompt
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated audio.

                 To receive the bytes of the audio directly, specify `audio/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                mpeg:
                  description: raw bytes
                  value: audio/mpeg
                mpegJSON:
                  description: base64 encoded
                  value: application/json; type=audio/mpeg
                wav:
                  description: raw bytes
                  value: audio/wav
                wavJSON:
                  description: base64 encoded
                  value: application/json; type=audio/wav
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
              description: |-
                Indicates the reason the generation finished. It is always `SUCCESS` for this endpoint.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            audio/mpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated audio.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated mpeg
            application/json; type=audio/mpeg:
              schema:
                type: object
                properties:
                  audio:
                    type: string
                    description: The generated audio, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                    description: The reason the generation finished. It is always `SUCCESS` for this endpoint.
                    example: SUCCESS
                required:
                  - audio
                  - finish_reason
            audio/wav:
              schema:
                type: string
                description: |-
                  The bytes of the generated audio.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated wav
            application/json; type=audio/wav:
              schema:
                type: object
                properties:
                  audio:
                    type: string
                    description: The generated audio, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                    description: The reason the generation finished. It is always `SUCCESS` for this endpoint.
                    example: SUCCESS
                required:
                  - audio
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Copyrighted Content Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: copyrighted_content
                    errors:
                      - Our system has detected the presence of copyrighted content in your audio. To comply with our guidelines, we cannot process this request. Please upload a different audio file.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/audio/stable-audio-2/audio-to-audio:
    post:
      tags:
        - Stable Audio 2.0
      summary: Audio-to-Audio
      description: |-
        Stable Audio 2.0 transforms existing audio samples into new high-quality compositions up to three minutes
        long at 44.1kHz stereo using text instructions. Discover techniques for sample transformation in our
        [Audio to Audio Guide](https://www.stableaudio.com/user-guide/audio-to-audio) to maximize creative control.
        Read more about the model capabilities [here](https://stability.ai/news/stable-audio-2-0).

        Stable Audio 2.0 was exclusively trained on licensed data from the [AudioSparx](https://www.audiosparx.com/)
        music library, honoring opt-out requests and ensuring fair compensation for creators.
        Read more about the model capabilities [here](https://stability.ai/news/stable-audio-2-0).

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to
        [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Audio_API.ipynb)
        or try Stable Audio 2.0 for free at [stableaudio.com](https://stableaudio.com).

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`. The `accept` header should be set to one of the following:
        - `audio/*` to receive the audio in the format specified by the `output_format` parameter.
        - `application/json` to receive the audio encoded as base64 in a JSON response.

        The body of the request should include:
        - `prompt` - text to generate the audio from. Check our
        [prompt guide](https://www.stableaudio.com/user-guide/audio-to-audio) for tips
        - `audio` - the audio to use as the starting point for the generation

        > **Notes:**
        > - We do not allow copyrighted content to be uploaded to our platform.
        > - Maximum request size is 50Mb.

        #### **Optional Parameters:**
        The body may optionally include:
        - `output_format` - the the format of the output audio
        - `seed` - the randomness seed to use for the generation
        - `steps` - the number of sampling steps
        - `duration` - the number of seconds of the generated audio
        - `cfg_scale` - controls how strictly the diffusion process adheres to the prompt text
        - `strength` - controls how much influence the `audio` parameter has on the output audio

        > **Note:** for more details about these parameters please see the request schema below.

        ### Credits
        By default, 12 credits per successful generation. The number of credits is determined
        by the following formula: `credits = 9 + 0.06 * steps`.

        Examples:
        - 50 steps = 12 credits [default]
        - 100 steps = 15 credits

        As always, you will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/audio/stable-audio-2/audio-to-audio",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "audio/*"
                },
                files={
                    "audio": open("./uk-bass-base.mp3", "rb"),
                },
                data={
                    "prompt": "A song in the 3/4 time signature that features cheerful acoustic guitar, live recorded drums, and rhythmic claps, The mood is happy and up-lifting.",
                    "output_format": "mp3",
                    "duration": 20,
                    "steps": 30,
                },
            )

            if response.status_code == 200:
                with open("./output.mp3", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              prompt:
                "A song in the 3/4 time signature that features cheerful acoustic guitar, live recorded drums, and rhythmic claps, The mood is happy and up-lifting.",
              output_format: "mp3",
              duration: 20,
              steps: 30,
              audio: fs.createReadStream("./uk-bass-base.mp3"),
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/audio/stable-audio-2/audio-to-audio`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: {
                  Authorization: `Bearer sk-MYAPIKEY`,
                  Accept: "audio/*",
                },
              },
            );

            if (response.status === 200) {
              fs.writeFileSync("./output.mp3", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/audio/stable-audio-2/audio-to-audio" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: audio/*" \
              -F prompt="A song in the 3/4 time signature that features cheerful acoustic guitar, live recorded drums, and rhythmic claps, The mood is happy and up-lifting." \
              -F output_format="mp3" \
              -F duration="20" \
              -F steps="30" \
              -F audio=@"./uk-bass-base.mp3" \
              -o "./output.mp3"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: audio/*
            description: Specify `audio/*` to receive the bytes of the audio directly. Otherwise specify `application/json` to receive the audio as base64 encoded JSON.
            enum:
              - audio/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    What you wish the output audio to be. A strong, descriptive prompt that clearly defines
                    instruments, moods, styles, and genre will lead to better results.

                    You can make a prompt as simple or complex as you like. Simple prompts are good for clean
                    output audio. Complex prompts are good for adding texture and depth to the output audio.

                    Check our [prompt guide](https://www.stableaudio.com/user-guide/audio-to-audio) for tips.
                duration:
                  type: number
                  minimum: 1
                  maximum: 190
                  default: 190
                  description: Controls the duration in seconds of the generated audio.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                steps:
                  type: integer
                  minimum: 30
                  maximum: 100
                  default: 50
                  description: Controls the number of sampling steps.
                cfg_scale:
                  type: number
                  minimum: 1
                  maximum: 25
                  default: 7
                  description: |-
                    How strictly the diffusion process adheres to the prompt text (higher values make your
                    audio closer to your prompt).
                output_format:
                  type: string
                  enum:
                    - mp3
                    - wav
                  default: mp3
                  description: Dictates the `content-type` of the generated audio.
                audio:
                  type: string
                  description: |-
                    The audio to be use as the starting point for the generation.

                    Supported Formats:
                    - mp3
                    - wav

                    Validation Rule:
                    - Audio must be between 6 and 190 seconds long
                  format: binary
                  example: ./some/audio.mp3
                strength:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 1
                  description: |-
                    Sometimes referred to as _denoising_, this parameter controls how much influence the
                    `audio` parameter has on the generated audio.
                    A value of 0 would yield audio that is identical to the input.
                    A value of 1 would be as if you passed in no audio at all.
              required:
                - prompt
                - audio
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated audio.

                 To receive the bytes of the audio directly, specify `audio/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                mpeg:
                  description: raw bytes
                  value: audio/mpeg
                mpegJSON:
                  description: base64 encoded
                  value: application/json; type=audio/mpeg
                wav:
                  description: raw bytes
                  value: audio/wav
                wavJSON:
                  description: base64 encoded
                  value: application/json; type=audio/wav
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
              description: |-
                Indicates the reason the generation finished. It is always `SUCCESS` for this endpoint.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            audio/mpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated audio.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated mpeg
            application/json; type=audio/mpeg:
              schema:
                type: object
                properties:
                  audio:
                    type: string
                    description: The generated audio, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                    description: The reason the generation finished. It is always `SUCCESS` for this endpoint.
                    example: SUCCESS
                required:
                  - audio
                  - finish_reason
            audio/wav:
              schema:
                type: string
                description: |-
                  The bytes of the generated audio.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated wav
            application/json; type=audio/wav:
              schema:
                type: object
                properties:
                  audio:
                    type: string
                    description: The generated audio, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                    description: The reason the generation finished. It is always `SUCCESS` for this endpoint.
                    example: SUCCESS
                required:
                  - audio
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Copyrighted Content Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: copyrighted_content
                    errors:
                      - Our system has detected the presence of copyrighted content in your audio. To comply with our guidelines, we cannot process this request. Please upload a different audio file.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/upscale/conservative:
    post:
      tags:
        - Upscale
      summary: Conservative
      description: |-
        Takes images between 64x64 and 1 megapixel and upscales them all the way to 4K resolution. Put more generally, it can upscale images ~20-40x times while preserving all aspects. Conservative Upscale minimizes alterations to the image and should not be used to reimagine an image.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=t1Q4w2uvvza0)

        ### How to use

        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request must include:
        - `image`
        - `prompt`

        Optionally, the body of the request may also include:
        - `negative_prompt`
        - `seed`
        - `output_format`
        - `creativity`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will be 4 megapixels.

        ### Credits
        Flat rate of 25 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/upscale/conservative",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./low-res-flower.jpg", "rb"),
                },
                data={
                    "prompt": "a flower",
                    "output_format": "webp",
                },
            )

            if response.status_code == 200:
                with open("./flower.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              image: fs.createReadStream("./low-res-flower.jpg"),
              prompt: "a flower",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/upscale/conservative`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*" 
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./flower.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/upscale/conservative" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./low-res-flower.jpg" \
              -F prompt="a flower" \
              -F output_format="webp" \
              -o "./flower.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image you wish to upscale.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                    - The aspect ratio must be between 1:2.5 and 2.5:1
                  format: binary
                  example: ./some/image.png
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                creativity:
                  $ref: '#/components/schemas/Creativity'
              required:
                - image
                - prompt
      responses:
        '200':
          description: Upscale was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/upscale/creative:
    post:
      tags:
        - Upscale
      summary: Creative Upscale (async)
      description: |-
        Takes images between 64x64 and 1 megapixel and upscales them all the way to **4K** resolution.  Put more
        generally, it can upscale images ~20-40x times while preserving, and often enhancing, quality.
        Creative Upscale **works best on highly degraded images and is not for photos of 1mp or above** as it performs
        heavy reimagining (controlled by creativity scale).

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=QXxi9tfI425t)


        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`.

        The body of the request should include:
        - `image`
        - `prompt`

        The body may optionally include:
        - `seed`
        - `negative_prompt`
        - `output_format`
        - `creativity`
        - `style_preset`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Results
        After invoking this endpoint with the required parameters, use the `id` in the response to poll for results at the
        [results/{id} endpoint](#tag/Results/paths/~1v2beta~1results~1%7Bid%7D/get).  Rate-limiting or other errors may occur if you poll more than once every 10 seconds.

        ### Credits
        Flat rate of 25 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/upscale/creative",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./kitten-in-space.png", "rb")
                },
                data={
                    "prompt": "cute fluffy white kitten floating in space, pastel colors",
                    "output_format": "webp",
                },
            )

            print("Generation ID:", response.json().get('id'))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              image: fs.createReadStream("./kitten-in-space.png"),
              prompt: "cute fluffy white kitten floating in space, pastel colors",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/upscale/creative`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`
                },
              },
            );

            console.log("Generation ID:", response.data.id);
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/upscale/creative" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -F image=@"./kitten-in-rainforest.png" \
              -F prompt="cute fluffy white kitten sitting in a rainforest, pastel colors" \
              -F output_format=webp \
              -o "./output.json"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image you wish to upscale.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 1,048,576 pixels
                  format: binary
                  example: ./some/image.png
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                creativity:
                  type: number
                  minimum: 0.1
                  maximum: 0.5
                  default: 0.3
                  description: |-
                    Indicates how creative the model should be when upscaling an image.
                    Higher values will result in more details being added to the image during upscaling.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
              required:
                - image
                - prompt
      responses:
        '200':
          description: Upscale was started.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                required:
                  - id
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/upscale/creative/result/{id}:
    get:
      tags: []
      summary: Fetch Creative Upscale result
      description: |-
        Fetch the result of an upscale generation by ID. 

        Make sure to use the same API key to fetch the generation result that you used to create the generation, 
        otherwise you will receive a `404` response.

        ### How to use
        Please invoke this endpoint with a `GET` request.

        The headers of the request must include an API key in the `authorization` field and the ID
        of your generation must be in the path.

        ### How is progress reported?
        Your generation is either `in-progress` (i.e. status code `202`) or it is complete (i.e. status code `200`). 
        We may add more fine-grained progress reporting in the future (e.g. a numerical progress).

        ### How long are results stored?
        Results are stored for 24 hours after generation. After that, the results are deleted.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            generation_id = "e52772ac75b..."

            response = requests.request(
                "GET",
                f"https://api.stability.ai/v2beta/stable-image/upscale/creative/result/{generation_id}",
                headers={
                    'accept': "image/*",  # Use 'application/json' to receive base64 encoded JSON
                    'authorization': f"Bearer sk-MYAPIKEY"
                },
            )

            if response.status_code == 202:
                print("Generation in-progress, try again in 10 seconds.")
            elif response.status_code == 200:
                print("Generation complete!")
                with open("upscaled.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import fs from "node:fs";

            const generationID = "e52772ac75b...";

            const response = await axios.request({
              url: `https://api.stability.ai/v2beta/stable-image/upscale/creative/result/${generationID}`,
              method: "GET",
              validateStatus: undefined,
              responseType: "arraybuffer",
              headers: {
                Authorization: `Bearer sk-MYAPIKEY`,
                Accept: "image/*", // Use 'application/json' to receive base64 encoded JSON
              },
            });

            if (response.status === 202) {
              console.log("Generation is still running, try again in 10 seconds.");
            } else if (response.status === 200) {
              console.log("Generation is complete!");
              fs.writeFileSync("upscaled.webp", Buffer.from(response.data));
            } else {
              throw new Error(`Response ${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            generation_id="e52772ac75b..."
            url="https://api.stability.ai/v2beta/stable-image/upscale/creative/result/$generation_id"
            http_status=$(curl -sS -f -o "./upscaled.webp" -w '%{http_code}' -H "authorization: sk-MYAPIKEY" -H 'accept: image/*' "$url")

            case $http_status in
                202)
                    echo "Still processing. Retrying in 10 seconds..."
                    ;;
                200)
                    echo "Download complete!"
                    ;;
                4*|5*)
                    mv "./upscaled.webp" "./error.json"
                    echo "Error: Check ./error.json for details."
                    exit 1
                    ;;
            esac
      parameters:
        - schema:
            $ref: '#/components/schemas/GenerationID'
          required: true
          name: id
          in: path
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      responses:
        '200':
          description: Upscale finished.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '202':
          description: Your upscale generation is still in-progress.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                  status:
                    type: string
                    enum:
                      - in-progress
                    description: The status of your generation.
                required:
                  - id
                  - status
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '404':
          description: 'id: the generation either does not exist or has expired.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2bca35116bc5431d6dc4b4ea2ef3da2f
                  name: generation_not_found
                  errors:
                    - 'id: the generation either does not exist or has expired.'
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/upscale/fast:
    post:
      tags:
        - Upscale
      summary: Fast
      description: |-
        Our Fast Upscaler service enhances image resolution by 4x using predictive and generative AI. This lightweight and fast service (processing in ~1 second) is ideal for enhancing the quality of compressed images, making it suitable for social media posts and other applications.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=t1Q4w2uvvza0)

        ### How to use

        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request must include:
        - `image`

        Optionally, the body of the request may also include:
        - `output_format`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image is 4 times that of the input image with a maximum size of 16 megapixels.

        ### Credits
        Flat rate of 1 credit per successful generation. You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/upscale/fast",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./low-res-flower.jpg", "rb"),
                },
                data={
                    "output_format": "webp",
                },
            )

            if response.status_code == 200:
                with open("./flower.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              image: fs.createReadStream("./low-res-flower.jpg"),
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/upscale/fast`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*" 
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./flower.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/upscale/fast" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./low-res-flower.jpg" \
              -F output_format="webp" \
              -o "./flower.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image you wish to upscale.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Width must be between 32 and 1,536 pixels
                    - Height must be between 32 and 1,536 pixels
                    - Total pixel count must be between 1,024 and 1,048,576 pixels
                  format: binary
                  example: ./some/image.png
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
              required:
                - image
      responses:
        '200':
          description: Upscale was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/edit/erase:
    post:
      tags:
        - Edit
      summary: Erase
      description: |-
        The Erase service removes unwanted objects, such as blemishes on portraits or items on desks, using image masks.

        The mask is provided in one of two ways:
          1. Explicitly passing in a separate image via the `mask` parameter 
          2. Derived from the alpha channel of the `image` parameter.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=t1Q4w2uvvza0)

        ### How to use

        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.
          
        The body of the request must include:
        - `image`

        Optionally, the body of the request may also include:
        - `mask`
        - `seed`
        - `output_format`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will be 4 megapixels.

        ### Credits
        Flat rate of 3 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/edit/erase",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./kangaroo-on-the-beach.png", "rb"),
                    "mask": open("./mask-of-kangaroo.png", "rb"),
                },
                data={
                    "output_format": "webp",
                },
            )

            if response.status_code == 200:
                with open("./just-the-beach.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              image: fs.createReadStream("./kangaroo-on-the-beach.png"),
              mask: fs.createReadStream("./mask-of-kangaroo.png"),
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/edit/erase`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*" 
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./just-the-beach.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/edit/erase" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./kangaroo-on-the-beach.png" \
              -F mask=@"./mask-of-kangaroo.png" \
              -F output_format="webp" \
              -o "./just-the-beach.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image you wish to erase from.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                  format: binary
                  example: ./some/image.png
                mask:
                  type: string
                  description: |-
                    Controls the strength of the inpainting process on a per-pixel basis, either via a 
                    second image (passed into this parameter) or via the alpha channel of the `image` parameter.

                    **Passing in a Mask**  

                    The image passed to this parameter should be a black and white image that represents, 
                    at any pixel, the strength of inpainting based on how dark or light the given pixel is. 
                    Completely black pixels represent no inpainting strength while completely white pixels 
                    represent maximum strength.

                    In the event the mask is a different size than the `image` parameter, it will be automatically resized.

                    **Alpha Channel Support**

                    If you don't provide an explicit mask, one will be derived from the alpha channel of the `image` parameter.
                    Transparent pixels will be inpainted while opaque pixels will be preserved.

                    In the event an `image` with an alpha channel is provided along with a `mask`, the `mask` will take precedence.
                  format: binary
                  example: ./some/image.png
                grow_mask:
                  type: number
                  minimum: 0
                  maximum: 20
                  default: 5
                  description: |-
                    Grows the edges of the mask outward in all directions by the specified number of pixels. The expanded area around the mask will be blurred, which can help smooth the transition between inpainted content and the original image.

                    Try this parameter if you notice seams or rough edges around the inpainted content.

                    > Note: Excessive growth may obscure fine details in the mask and/or merge nearby masked regions.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
              required:
                - image
                - prompt
      responses:
        '200':
          description: Erase was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/edit/inpaint:
    post:
      tags:
        - Edit
      summary: Inpaint
      description: |-
        Intelligently modify images by filling in or replacing specified areas with new content based
        on the content of a "mask" image.

        The "mask" is provided in one of two ways:
          1. Explicitly passing in a separate image via the `mask` parameter
          2. Derived from the alpha channel of the `image` parameter.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=t1Q4w2uvvza0)

        ### How to use

        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request must include:
        - `image`
        - `prompt`

        Optionally, the body of the request may also include:
        - `mask`
        - `negative_prompt`
        - `seed`
        - `output_format`
        - `style_preset`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will be 4 megapixels.

        ### Credits
        Flat rate of 3 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/edit/inpaint",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./dog-wearing-vr-goggles.png", "rb"),
                    "mask": open("./mask.png", "rb"),
                },
                data={
                    "prompt": "dog wearing black glasses",
                    "output_format": "webp",
                },
            )

            if response.status_code == 200:
                with open("./dog-wearing-black-glasses.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              image: fs.createReadStream("./dog-wearing-vr-goggles.png"),
              mask: fs.createReadStream("./mask.png"),
              prompt: "dog wearing black glasses",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/edit/inpaint`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*" 
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./dog-wearing-black-glasses.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/edit/inpaint" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./dog-wearing-vr-goggles.png" \
              -F mask=@"./mask.png" \
              -F prompt="golden retriever in a field" \
              -F output_format="webp" \
              -o "./dog-wearing-black-glasses.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image you wish to inpaint.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                  format: binary
                  example: ./some/image.png
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                mask:
                  type: string
                  description: |-
                    Controls the strength of the inpainting process on a per-pixel basis, either via a
                    second image (passed into this parameter) or via the alpha channel of the `image` parameter.

                    **Passing in a Mask**

                    The image passed to this parameter should be a black and white image that represents,
                    at any pixel, the strength of inpainting based on how dark or light the given pixel is.
                    Completely black pixels represent no inpainting strength while completely white pixels
                    represent maximum strength.

                    In the event the mask is a different size than the `image` parameter, it will be automatically resized.

                    **Alpha Channel Support**

                    If you don't provide an explicit mask, one will be derived from the alpha channel of the `image` parameter.
                    Transparent pixels will be inpainted while opaque pixels will be preserved.

                    In the event an `image` with an alpha channel is provided along with a `mask`, the `mask` will take precedence.
                  format: binary
                  example: ./some/image.png
                grow_mask:
                  type: number
                  minimum: 0
                  maximum: 100
                  default: 5
                  description: |-
                    Grows the edges of the mask outward in all directions by the specified number of pixels. The expanded area around the mask will be blurred, which can help smooth the transition between inpainted content and the original image.

                    Try this parameter if you notice seams or rough edges around the inpainted content.

                    > Note: Excessive growth may obscure fine details in the mask and/or merge nearby masked regions.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
              required:
                - image
                - prompt
      responses:
        '200':
          description: Inpainting was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/edit/outpaint:
    post:
      tags:
        - Edit
      summary: Outpaint
      description: |-
        The Outpaint service inserts additional content in an image to fill in the space in any direction.
        Compared to other automated or manual attempts to expand the content in an image, the Outpaint service
        should minimize artifacts and signs that the original image has been edited.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=bZ2yK7VQSgLw)

        ### How to use

        Please invoke this endpoint with a POST request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request must include:
        - `image`

        Along with _at least one_ outpaint direction:
        - `left`
        - `right`
        - `up`
        - `down`

        > **Note:** for best quality use outpaint direction values smaller or equal to your source image dimensions.

        Each of these parameters should be set to a number between 0 and 2000, representing the number of pixels to outpaint in that direction.

        Optionally, the body of the request may also include:
        - `prompt`
        - `seed`
        - `output_format`
        - `creativity`
        - `style_preset`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Credits
        Flat rate of 4 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/edit/outpaint",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./husky-in-a-field.png", "rb")
                },
                data={
                    "left": 200,
                    "down": 200,
                    "output_format": "webp"
                },
            )

            if response.status_code == 200:
                with open("./husky-in-a-huge-field.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              image: fs.createReadStream("./husky-in-a-field.png"),
              left: 200,
              down: 200,
              output_format: "webp",
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/edit/outpaint`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*" 
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./husky-in-a-huge-field.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/edit/outpaint" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./husky-in-a-field.png" \
              -F left=200 \
              -F bottom=200 \
              -F output_format="webp" \
              -o "./husky-in-a-huge-field.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image you wish to outpaint.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                    - The aspect ratio must be between 1:2.5 and 2.5:1
                  format: binary
                  example: ./some/image.png
                left:
                  type: integer
                  minimum: 0
                  maximum: 2000
                  default: 0
                  description: The number of pixels to outpaint on the left side of the image. At least one outpainting direction must be supplied with a non-zero value.
                right:
                  type: integer
                  minimum: 0
                  maximum: 2000
                  default: 0
                  description: The number of pixels to outpaint on the right side of the image. At least one outpainting direction must be supplied with a non-zero value.
                up:
                  type: integer
                  minimum: 0
                  maximum: 2000
                  default: 0
                  description: The number of pixels to outpaint on the top of the image. At least one outpainting direction must be supplied with a non-zero value.
                down:
                  type: integer
                  minimum: 0
                  maximum: 2000
                  default: 0
                  description: The number of pixels to outpaint on the bottom of the image. At least one outpainting direction must be supplied with a non-zero value.
                creativity:
                  allOf:
                    - $ref: '#/components/schemas/Creativity'
                    - minimum: 0
                      maximum: 1
                      default: 0.5
                prompt:
                  type: string
                  minLength: 0
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - png
                    - jpeg
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
              required:
                - image
      responses:
        '200':
          description: Outpainting was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/edit/search-and-replace:
    post:
      tags:
        - Edit
      summary: Search and Replace
      description: |-
        The Search and Replace service is a specific version of inpainting that does not require a mask.
        Instead, users can leverage a `search_prompt` to identify an object in simple language to be replaced.
        The service will automatically segment the object and replace it with the object requested in the prompt.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=0lDpGa2jAmAs)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request should include:
        - `image`
        - `prompt`
        - `search_prompt`

        The body may optionally include:
        - `seed`
        - `negative_prompt`
        - `output_format`
        - `style_preset`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will be 4 megapixels.

        ### Credits
        Flat rate of 4 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/edit/search-and-replace",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./husky-in-a-field.png", "rb")
                },
                data={
                    "prompt": "golden retriever in a field",
                    "search_prompt": "dog",
                    "output_format": "webp",
                },
            )

            if response.status_code == 200:
                with open("./golden-retriever-in-a-field.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              image: fs.createReadStream("./husky-in-a-field.png"),
              prompt: "golden retriever standing in a field",
              search_prompt: "dog",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/edit/search-and-replace`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*"
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./golden-retriever-in-a-field.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/edit/search-and-replace" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./husky-in-a-field.png" \
              -F prompt="golden retriever in a field" \
              -F search_prompt="dog" \
              -F output_format="webp" \
              -o "./golden-retriever-in-a-field.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    An image containing content you wish to replace.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                    - The aspect ratio must be between 1:2.5 and 2.5:1
                  format: binary
                  example: ./some/image.png
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                search_prompt:
                  type: string
                  maxLength: 10000
                  description: Short description of what to inpaint in the `image`.
                  example: glasses
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                grow_mask:
                  type: number
                  minimum: 0
                  maximum: 20
                  default: 3
                  description: |-
                    Grows the edges of the mask outward in all directions by the specified number of pixels. The expanded area around the mask will be blurred, which can help smooth the transition between inpainted content and the original image.

                    Try this parameter if you notice seams or rough edges around the inpainted content.

                    > Note: Excessive growth may obscure fine details in the mask and/or merge nearby masked regions.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
              required:
                - image
                - prompt
                - search_prompt
      responses:
        '200':
          description: Search-and-Replace was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/edit/search-and-recolor:
    post:
      tags:
        - Edit
      summary: Search and Recolor
      description: |-
        The Search and Recolor service provides the ability to change the color of a specific object in an image using a prompt.
        This service is a specific version of inpainting that does not require a mask. The Search and Recolor
        service will automatically segment the object and recolor it using the colors requested in the prompt.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=mtgSh4Stj3l)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request should include:
        - `image`
        - `prompt`
        - `select_prompt`

        The body may optionally include:
        - `grow_mask`
        - `seed`
        - `negative_prompt`
        - `output_format`
        - `style_preset`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will match the resolution of the input image.

        ### Credits
        Flat rate of 5 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/edit/search-and-recolor",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./red-car.png", "rb")
                },
                data={
                    "prompt": "a yellow car",
                    "select_prompt": "car",
                    "output_format": "webp",
                },
            )

            if response.status_code == 200:
                with open("./yellow-car.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              image: fs.createReadStream("./red-car.png"),
              prompt: "a yellow car",
              select_prompt: "car",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/edit/search-and-recolor`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*"
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./yellow-car.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/edit/search-and-recolor" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./red-car.png" \
              -F prompt="a yellow car" \
              -F select_prompt="car" \
              -F output_format="webp" \
              -o "./yellow-car.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    An image containing content you wish to recolor.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                    - The aspect ratio must be between 1:2.5 and 2.5:1
                  format: binary
                  example: ./some/image.png
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                select_prompt:
                  type: string
                  maxLength: 10000
                  description: Short description of what to search for in the `image`.
                  example: glasses
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                grow_mask:
                  type: number
                  minimum: 0
                  maximum: 20
                  default: 3
                  description: |-
                    Grows the edges of the mask outward in all directions by the specified number of pixels. The expanded area around the mask will be blurred, which can help smooth the transition between inpainted content and the original image.

                    Try this parameter if you notice seams or rough edges around the inpainted content.

                    > Note: Excessive growth may obscure fine details in the mask and/or merge nearby masked regions.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
              required:
                - image
                - prompt
                - select_prompt
      responses:
        '200':
          description: Search-and-Recolor was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/edit/remove-background:
    post:
      tags:
        - Edit
      summary: Remove Background
      description: |-
        The Remove Background service accurately segments the foreground from an image and implements 
        and removes the background.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=VHofb3LAVmqi)


        ### How to use

        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.
          
        The body of the request must include:
        - `image`

        Optionally, the body of the request may also include:
        - `output_format`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Credits
        Flat rate of 2 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/edit/remove-background",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./husky-in-a-field.png", "rb")
                },
                data={
                    "output_format": "webp"
                },
            )

            if response.status_code == 200:
                with open("./husky.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              image: fs.createReadStream("./husky-in-a-field.png"),
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/edit/remove-background`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*" 
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./husky.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/edit/remove-background" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./husky-in-a-field.png" \
              -F output_format="webp" \
              -o "./husky.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: |-
                    The image whose background you wish to remove.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 4,194,304 pixels
                  format: binary
                  example: ./some/image.png
                output_format:
                  type: string
                  enum:
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
              required:
                - image
      responses:
        '200':
          description: Background successfully removed.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/edit/replace-background-and-relight:
    post:
      tags:
        - Edit
      summary: Replace Background and Relight (async)
      description: |-
        The Replace Background and Relight edit service lets users swap backgrounds with
        AI-generated or uploaded images while adjusting lighting to match the subject. This
        new API provides a streamlined image editing solution and can serve e-commerce, real
        estate, photography, and creative projects.

        Some of the things you can do include:
          - Background Replacement: Remove existing background and add new ones.
          - AI Background Generation: Create new backgrounds using AI generated images based on prompts.
          - Relighting: Adjust lighting in images that are under or overexposed.
          - Flexible Inputs: Use your own background image or generate one.
          - Lighting Adjustments: Modify light reference, direction, and strength.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=mtgSh4Stj3l)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`.

        The body of the request should include:
        - `subject_image`
        - `background_prompt` and/or `background_reference`

        The body may optionally include:
        - `light_reference` or `light_source_direction`
        - `light_source_strength` (requires `light_reference` or `light_source_direction`)
        - `foreground_prompt`
        - `negative_prompt`
        - `preserve_original_subject`
        - `original_background_depth`
        - `keep_original_background`
        - `light_source_strength`
        - `seed`
        - `output_format`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Results
        After invoking this endpoint with the required parameters, use the `id` in the response to poll for results at the
        [results/{id} endpoint](#tag/Results/paths/~1v2beta~1results~1%7Bid%7D/get).  Rate-limiting or other errors may occur if you poll more than once every 10 seconds.

        ### Credits
        Flat rate of 8 credits per successful generation. You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/edit/replace-background-and-relight",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "subject_image": open("./husky-in-a-field.png", "rb")
                },
                data={
                    "background_prompt": "cinematic lighting",
                    "output_format": "webp",
                },
            )

            print("Generation ID:", response.json().get('id'))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              subject_image: fs.createReadStream("./husky-in-a-field.png"),
              background_prompt: "cinematic lighting",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/edit/replace-background-and-relight`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                },
              },
            );

            console.log("Generation ID:", response.data.id);
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/edit/replace-background-and-relight" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F subject_image=@"./husky-in-a-field.png" \
              -F background_prompt="cinematic lighting" \
              -F output_format="webp" \
              -o "./output.json"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                subject_image:
                  type: string
                  description: |-
                    An image containing the subject that you wish to change background and relight.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                    - The aspect ratio must be between 1:2.5 and 2.5:1
                  format: binary
                  example: ./some/image.png
                background_reference:
                  type: string
                  description: |-
                    An image whose style you wish to use in the background. Similar to the Control: Style API,
                    stylistic elements from this image are added to the background.

                    > **Important:** either `background_reference` or `background_prompt` must be provided.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                  format: binary
                  example: ./some/image.png
                background_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    What you wish to see in the background of the output image. This could be a description
                    of the desired background scene, or just a description of the lighting if modifying the
                    light source through `light_source_direction` or `light_reference`.

                    > **Important:** either `background_reference` or `background_prompt` must be provided.
                foreground_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    Description of the subject. Use this to prevent elements of the background from
                    bleeding into the subject. For example, if you find your subject is turning
                    green with a forest in the background, try putting a short description of the
                    subject in this field.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                preserve_original_subject:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.6
                  description: |-
                    How much to overlay the original subject to exactly match the original image. A
                    1.0 is an exact pixel match for the subject, and 0.0 is a close match but will
                    have new lighting qualities. This is an advanced feature.
                original_background_depth:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.5
                  description: Controls the generated background to have the same depth as the original subject image. This is an advanced feature.
                keep_original_background:
                  type: string
                  enum:
                    - 'true'
                    - 'false'
                  default: 'false'
                  description: |-
                    Whether to keep the background of the original image. When this is on, the background
                    will have different lighting than the original image that changes based on the other
                    parameters in this API.
                light_source_direction:
                  type: string
                  enum:
                    - left
                    - right
                    - above
                    - below
                  description: Direction of the light source.
                light_reference:
                  type: string
                  description: |-
                    An image with the desired lighting. Lighter sections of the light_reference image will correspond to sections with brighter lighting in the output image.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                  format: binary
                  example: ./some/image.png
                light_source_strength:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.3
                  description: |-
                    If using `light_reference_image` or `light_source_direction`, controls the strength
                    of the light source. 1.0 is brighter and 0.0 is dimmer. This is an advanced feature.

                    > **Important:** Use of this parameter requires `light_reference` or `light_source_direction` to be provided.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
              required:
                - subject_image
      responses:
        '200':
          description: Replace Background and Relight was started.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/GenerationID'
                required:
                  - id
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/generate/ultra:
    post:
      tags:
        - Generate
      summary: Stable Image Ultra
      description: |-
        Our most advanced text to image generation service, Stable Image Ultra creates the highest quality images
        with unprecedented prompt understanding. Ultra excels in typography, complex compositions, dynamic lighting,
        vibrant hues, and overall cohesion and structure of an art piece. Made from the most advanced models,
        including Stable Diffusion 3.5, Ultra offers the best of the Stable Diffusion ecosystem.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=yXhs626oZdr1)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`.  The accept header should be set to one of the following:
        - `image/*` to receive the image in the format specified by the `output_format` parameter.
        - `application/json` to receive the image in the format specified by the `output_format` parameter, but encoded to base64 in a JSON response.

        The only required parameter is the `prompt` field, which should contain the text prompt for the image generation.

        The body of the request should include:
        - `prompt` - text to generate the image from

        The body may optionally include:
        - `image` - the image to use as the starting point for the generation
        - `strength` - controls how much influence the `image` parameter has on the output image
        - `aspect_ratio` - the aspect ratio of the output image
        - `negative_prompt` - keywords of what you **do not** wish to see in the output image
        - `seed` - the randomness seed to use for the generation
        - `output_format` - the the format of the output image

        > **Note:** for the full list of optional parameters, please see the request schema below.

        ### Output
        The resolution of the generated image will be 1 megapixel. The default resolution is 1024x1024.

        ### Credits
        The Ultra service uses 8 credits per successful result. You will not be charged for failed results.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/generate/ultra",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={"none": ''},
                data={
                    "prompt": "Lighthouse on a cliff overlooking the ocean",
                    "output_format": "webp",
                },
            )

            if response.status_code == 200:
                with open("./lighthouse.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              prompt: "Lighthouse on a cliff overlooking the ocean",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/generate/ultra`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*" 
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./lighthouse.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/generate/ultra" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F prompt="Lighthouse on a cliff overlooking the ocean" \
              -F output_format="webp" \
              -o "./lighthouse.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                aspect_ratio:
                  type: string
                  enum:
                    - '21:9'
                    - '16:9'
                    - '3:2'
                    - '5:4'
                    - '1:1'
                    - '4:5'
                    - '2:3'
                    - '9:16'
                    - '9:21'
                  default: '1:1'
                  description: Controls the aspect ratio of the generated image.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                image:
                  type: string
                  description: |-
                    The image to use as the starting point for the generation.

                    > **Important:** The `strength` parameter is required when `image` is provided.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Width must be between 64 and 16,384 pixels
                    - Height must be between 64 and 16,384 pixels
                    - Total pixel count must be at least 4,096 pixels
                  format: binary
                  example: ./some/image.png
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
                strength:
                  type: number
                  minimum: 0
                  maximum: 1
                  description: |-
                    Sometimes referred to as _denoising_, this parameter controls how much influence the 
                    `image` parameter has on the generated image.  A value of 0 would yield an image that 
                    is identical to the input.  A value of 1 would be as if you passed in no image at all.

                    > **Important:** This parameter is required when `image` is provided.
              required:
                - prompt
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/generate/core:
    post:
      tags:
        - Generate
      summary: Stable Image Core
      description: |-
        Our primary service for text-to-image generation, Stable Image Core represents the best quality achievable at high
        speed. No prompt engineering is required! Try asking for a style, a scene, or a character, and see what you get.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=yXhs626oZdr1)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request should include:
        - `prompt`

        The body may optionally include:
        - `aspect_ratio`
        - `negative_prompt`
        - `seed`
        - `style_preset`
        - `output_format`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will be 1.5 megapixels.

        ### Credits
        Flat rate of 3 credits per successful generation.  You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/generate/core",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={"none": ''},
                data={
                    "prompt": "Lighthouse on a cliff overlooking the ocean",
                    "output_format": "webp",
                },
            )

            if response.status_code == 200:
                with open("./lighthouse.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              prompt: "Lighthouse on a cliff overlooking the ocean",
              output_format: "webp"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/generate/core`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*" 
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./lighthouse.webp", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/generate/core" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F prompt="Lighthouse on a cliff overlooking the ocean" \
              -F output_format="webp" \
              -o "./lighthouse.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                aspect_ratio:
                  type: string
                  enum:
                    - '21:9'
                    - '16:9'
                    - '3:2'
                    - '5:4'
                    - '1:1'
                    - '4:5'
                    - '2:3'
                    - '9:16'
                    - '9:21'
                  default: '1:1'
                  description: Controls the aspect ratio of the generated image.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
                output_format:
                  type: string
                  enum:
                    - png
                    - jpeg
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
              required:
                - prompt
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/generate/sd3:
    post:
      tags:
        - Generate
      summary: Stable Diffusion 3.0 & 3.5
      description: |-
        Generate using Stable Diffusion 3.5 models, Stability AI latest base model:

        - **Stable Diffusion 3.5 Large**: At 8 billion parameters, with superior quality and
          prompt adherence, this base model is the most powerful in the Stable Diffusion
          family. This model is ideal for professional use cases at 1 megapixel resolution.

        - **Stable Diffusion 3.5 Large Turbo**: A distilled version of Stable Diffusion 3.5 Large.
          SD3.5 Large Turbo generates high-quality images with exceptional prompt adherence
          in just 4 steps, making it considerably faster than Stable Diffusion 3.5 Large.

        - **Stable Diffusion 3.5 Medium**: With 2.5 billion parameters, the model delivers an
          optimal balance between prompt accuracy and image quality, making it an efficient
          choice for fast high-performance image generation.

        Read more about the model capabilities [here](https://stability.ai/news/introducing-stable-diffusion-3-5).

        Stable Diffusion 3.0 models are also supported, powered by [Fireworks AI](https://fireworks.ai/). API status can be reviewed [here](https://readme.fireworks.ai/page/application-status).

        - **SD3 Large**: the 8 billion parameter model
        - **SD3 Large Turbo**: the 8 billion parameter model with a faster inference time
        - **SD3 Medium**: the 2 billion parameter model

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/SD3_API.ipynb)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`.  The accept header should be set to one of the following:
        - `image/*` to receive the image in the format specified by the `output_format` parameter.
        - `application/json` to receive the image encoded as base64 in a JSON response.

        #### **Generating with a prompt**
        Commonly referred to as **text-to-image**, this mode generates an image from text alone. While the only required
        parameter is the `prompt`, it also supports an `aspect_ratio` parameter which can be used to control the
        aspect ratio of the generated image.

        #### **Generating with a prompt *and* an image**
        Commonly referred to as **image-to-image**, this mode also generates an image from text but uses an existing image as the
        starting point. The required parameters are:
        - `prompt` - text to generate the image from
        - `image` - the image to use as the starting point for the generation
        - `strength` - controls how much influence the `image` parameter has on the output image
        - `mode` - must be set to `image-to-image`

        > **Note:** maximum request size is 10MiB.

        #### **Optional Parameters:**
        Both modes support the following optional parameters:
        - `model` - the model to use (SD3.5 Large, SD3.5 Large Turbo, etc.)
        - `output_format` - the the format of the output image
        - `seed` - the randomness seed to use for the generation
        - `negative_prompt` - keywords of what you **do not** wish to see in the output image
        - `cfg_scale` - controls how strictly the diffusion process adheres to the prompt text
        - `style_preset` - guides the image model towards a particular style

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will be 1MP. The default resolution is 1024x1024.

        ### Credits
        - **SD 3.5 & 3.0 Large**: Flat rate of 6.5 credits per successful generation.
        - **SD 3.5 & 3.0 Large Turbo**: Flat rate of 4 credits per successful generation.
        - **SD 3.5 & 3.0 Medium**: Flat rate of 3.5 credits per successful generation.

        As always, you will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/generate/sd3",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={"none": ''},
                data={
                    "prompt": "Lighthouse on a cliff overlooking the ocean",
                    "output_format": "jpeg",
                },
            )

            if response.status_code == 200:
                with open("./lighthouse.jpeg", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import fs from "node:fs";
            import axios from "axios";
            import FormData from "form-data";

            const payload = {
              prompt: "Lighthouse on a cliff overlooking the ocean",
              output_format: "jpeg"
            };

            const response = await axios.postForm(
              `https://api.stability.ai/v2beta/stable-image/generate/sd3`,
              axios.toFormData(payload, new FormData()),
              {
                validateStatus: undefined,
                responseType: "arraybuffer",
                headers: { 
                  Authorization: `Bearer sk-MYAPIKEY`, 
                  Accept: "image/*" 
                },
              },
            );

            if(response.status === 200) {
              fs.writeFileSync("./lighthouse.jpeg", Buffer.from(response.data));
            } else {
              throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/generate/sd3" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F prompt="Lighthouse on a cliff overlooking the ocean" \
              -F output_format="jpeg" \
              -o "./lighthouse.jpeg"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.
                mode:
                  type: string
                  enum:
                    - text-to-image
                    - image-to-image
                  default: text-to-image
                  description: |-
                    Controls whether this is a text-to-image or image-to-image generation, which affects which parameters are required:
                    - **text-to-image** requires only the `prompt` parameter
                    - **image-to-image** requires the `prompt`, `image`, and `strength` parameters
                  title: GenerationMode
                image:
                  type: string
                  description: |-
                    The image to use as the starting point for the generation.

                    Supported formats:
                      - jpeg
                      - png
                      - webp

                    Supported dimensions:
                      - Every side must be at least 64 pixels

                    > **Important:** This parameter is only valid for **image-to-image** requests.
                  format: binary
                strength:
                  type: number
                  minimum: 0
                  maximum: 1
                  description: |-
                    Sometimes referred to as _denoising_, this parameter controls how much influence the
                    `image` parameter has on the generated image.  A value of 0 would yield an image that
                    is identical to the input.  A value of 1 would be as if you passed in no image at all.

                    > **Important:** This parameter is only valid for **image-to-image** requests.
                aspect_ratio:
                  type: string
                  enum:
                    - '21:9'
                    - '16:9'
                    - '3:2'
                    - '5:4'
                    - '1:1'
                    - '4:5'
                    - '2:3'
                    - '9:16'
                    - '9:21'
                  default: '1:1'
                  description: |-
                    Controls the aspect ratio of the generated image. Defaults to 1:1.

                    > **Important:** This parameter is only valid for **text-to-image** requests.
                model:
                  type: string
                  enum:
                    - sd3.5-large
                    - sd3.5-large-turbo
                    - sd3.5-medium
                    - sd3-medium
                    - sd3-large
                    - sd3-large-turbo
                  default: sd3.5-large
                  description: |-
                    The model to use for generation.

                    - `sd3.5-large` requires 6.5 credits per generation
                    - `sd3.5-large-turbo` requires 4 credits per generation
                    - `sd3.5-medium` requires 3.5 credits per generation
                    - `sd3-large` requires 6.5 credits per generation
                    - `sd3-large-turbo` requires 4 credits per generation
                    - `sd3-medium` requires 3.5 credits per generation
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - png
                    - jpeg
                  default: png
                  description: Dictates the `content-type` of the generated image.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: |-
                    Guides the image model towards a particular style.

                    > **Important:** This parameter has no effect on the `sd3-*` models.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    Keywords of what you **do not** wish to see in the output image.
                    This is an advanced feature.

                    > **Important:** This parameter does **not** work with `sd3-large-turbo`.
                cfg_scale:
                  type: number
                  minimum: 1
                  maximum: 10
                  description: How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt). The _Large_ and _Medium_ models use a default of `4`. The _Turbo_ model uses a default of `1`.
              required:
                - prompt
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/control/sketch:
    post:
      tags:
        - Control
      summary: Sketch
      description: |-
        This service offers an ideal solution for design projects that require brainstorming and
        frequent iterations. It upgrades rough hand-drawn sketches to refined outputs with precise
        control. For non-sketch images, it allows detailed manipulation of the final appearance by
        leveraging the contour lines and edges within the image.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=ZKIAqHzJzzUo)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request should include:
        - `image`
        - `prompt`

        The body may optionally include:
        - `control_strength`
        - `negative_prompt`
        - `seed`
        - `output_format`
        - `style_preset`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will match that of the input image.

        ### Credits
        Flat rate of 3 credits per successful generation. You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/control/sketch",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./sketch.png", "rb")
                },
                data={
                    "prompt": "a medieval castle on a hill",
                    "control_strength": 0.7,
                    "output_format": "webp"
                },
            )

            if response.status_code == 200:
                with open("./castle.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import FormData from "form-data";
            import fs from "node:fs";

            const payload = {
                image: fs.createReadStream("./sketch.png"),
                prompt: "a medieval castle on a hill",
                control_strength: 0.6,
                output_format: "webp",
            };

            const response = await axios.postForm(
                `https://api.stability.ai/v2beta/stable-image/control/sketch`,
                axios.toFormData(payload, new FormData()),
                {
                    validateStatus: undefined,
                    responseType: "arraybuffer",
                    headers: {
                        Authorization: `Bearer sk-MYAPIKEY`,
                        Accept: "image/*"
                    },
                },
            );

            if (response.status === 200) {
                fs.writeFileSync("./castle.webp", Buffer.from(response.data));
            } else {
                throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/control/sketch" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./sketch.png" \
              -F prompt="a medieval castle on a hill" \
              -F control_strength=0.7 \
              -F output_format="webp" \
              -o "./castle.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                image:
                  type: string
                  description: |-
                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Image Dimensions:
                    - Every side must be at least 64 pixels
                    - The total pixel count cannot exceed 9,437,184 pixels (e.g. 3072x3072, 4096x2304, etc.)

                    Image Aspect Ratio:
                    - Must be between 1:2.5 and 2.5:1 (i.e. cannot be too tall or too wide)
                  format: binary
                  example: ./some/image.png
                control_strength:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.7
                  description: How much influence, or control, the `image` has on the generation. Represented as a float between 0 and 1, where 0 is the least influence and 1 is the maximum.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - png
                    - jpeg
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
              required:
                - prompt
                - image
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/control/structure:
    post:
      tags:
        - Control
      summary: Structure
      description: |-
        This service excels in generating images by maintaining the structure of an input image,
        making it especially valuable for advanced content creation scenarios such as recreating
        scenes or rendering characters from models.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=59RaZazXz0AU)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request should include:
        - `image`
        - `prompt`

        The body may optionally include:
        - `control_strength`
        - `negative_prompt`
        - `seed`
        - `output_format`
        - `style_preset`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will match that of the input image.

        ### Credits
        Flat rate of 3 credits per successful generation. You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/control/structure",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./cat-statue.png", "rb")
                },
                data={
                    "prompt": "a well manicured shrub in an english garden",
                    "control_strength": 0.7,
                    "output_format": "webp"
                },
            )

            if response.status_code == 200:
                with open("./shrub-in-a-garden.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import FormData from "form-data";
            import fs from "node:fs";

            const payload = {
                image: fs.createReadStream("./cat-statue.png"),
                prompt: "a well manicured shrub in an english garden",
                control_strength: 0.6,
                output_format: "webp",
            };

            const response = await axios.postForm(
                `https://api.stability.ai/v2beta/stable-image/control/structure`,
                axios.toFormData(payload, new FormData()),
                {
                    validateStatus: undefined,
                    responseType: "arraybuffer",
                    headers: {
                        Authorization: `Bearer sk-MYAPIKEY`,
                        Accept: "image/*"
                    },
                },
            );

            if (response.status === 200) {
                fs.writeFileSync("./shrub-in-a-garden.webp", Buffer.from(response.data));
            } else {
                throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/control/structure" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./cat-statue.png" \
              -F prompt="a well manicured shrub in an english garden" \
              -F control_strength=0.7 \
              -F output_format="webp" \
              -o "./shrub-in-a-garden.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                image:
                  type: string
                  description: |-
                    An image whose structure you wish to use as the foundation for a generation.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                    - The aspect ratio must be between 1:2.5 and 2.5:1
                  format: binary
                  example: ./some/image.png
                control_strength:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.7
                  description: How much influence, or control, the `image` has on the generation. Represented as a float between 0 and 1, where 0 is the least influence and 1 is the maximum.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - png
                    - jpeg
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
              required:
                - prompt
                - image
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/control/style:
    post:
      tags:
        - Control
      summary: Style Guide
      description: |-
        This service extracts stylistic elements from an input image (control image) and uses it to guide the creation of an output image based on the prompt. The result is a new image in the same style as the control image.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=y0WKjG72RvTE)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request should include:
        - `image`
        - `prompt`

        The body may optionally include:
        - `negative_prompt`
        - `aspect_ratio`
        - `fidelity`
        - `seed`
        - `output_format`
        - `style_preset`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will be 1MP. The default resolution is 1024x1024.

        ### Credits
        Flat rate of 4 credits per successful generation. You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/control/style",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "image": open("./cinematic-portrait.png", "rb")
                },
                data={
                    "prompt": "a majestic portrait of a chicken",
                    "output_format": "webp"
                },
            )

            if response.status_code == 200:
                with open("./chicken-portrait.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import FormData from "form-data";
            import fs from "node:fs";

            const payload = {
                image: fs.createReadStream("./cinematic-portrait.png"),
                prompt: "a majestic portrait of a chicken",
                output_format: "webp",
            };

            const response = await axios.postForm(
                `https://api.stability.ai/v2beta/stable-image/control/style`,
                axios.toFormData(payload, new FormData()),
                {
                    validateStatus: undefined,
                    responseType: "arraybuffer",
                    headers: {
                        Authorization: `Bearer sk-MYAPIKEY`,
                        Accept: "image/*"
                    },
                },
            );

            if (response.status === 200) {
                fs.writeFileSync("./chicken-portrait.webp", Buffer.from(response.data));
            } else {
                throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/control/style" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F image=@"./cinematic-portrait.png" \
              -F prompt="a majestic portrait of a chicken" \
              -F output_format="webp" \
              -o "./chicken-portrait.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                image:
                  type: string
                  description: |-
                    An image whose style you wish to use as the foundation for a generation.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Every side must be at least 64 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                    - The aspect ratio must be between 1:2.5 and 2.5:1
                  format: binary
                  example: ./some/image.png
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                aspect_ratio:
                  type: string
                  enum:
                    - '21:9'
                    - '16:9'
                    - '3:2'
                    - '5:4'
                    - '1:1'
                    - '4:5'
                    - '2:3'
                    - '9:16'
                    - '9:21'
                  default: '1:1'
                  description: Controls the aspect ratio of the generated image.
                fidelity:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.5
                  description: How closely the output image's style resembles the input image's style.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - png
                    - jpeg
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
              required:
                - prompt
                - image
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v2beta/stable-image/control/style-transfer:
    post:
      tags:
        - Control
      summary: Style Transfer
      description: |-
        Style Transfer applies visual characteristics from reference style images to target images.
        While Style Guide extracts stylistic elements from an input image (control image) and uses it
        to guide the creation of an output image based on the prompt, Style Transfer specifically
        transforms existing content while preserving the original composition.
        This tool helps create consistent content across multiple assets.

        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to
        [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=YCrxdv5LzqJ9)

        ### How to use
        Please invoke this endpoint with a `POST` request.

        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`, and the `accept` header should be set to one of the following:
          - `image/*` to receive the image in the format specified by the `output_format` parameter.
          - `application/json` to receive the image encoded as base64 in a JSON response.

        The body of the request should include:
        - `init_image`
        - `style_image`

        The body may optionally include:
        - `prompt`
        - `negative_prompt`
        - `style_strength`
        - `composition_fidelity`
        - `change_strength`
        - `seed`
        - `output_format`

        > **Note:** for more details about these parameters please see the request schema below.

        ### Output
        The resolution of the generated image will be 1MP, with the same aspect ratio as the `init_image`.

        ### Credits
        Flat rate of 8 credits per successful generation. You will not be charged for failed generations.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests

            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/control/style-transfer",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={
                    "init_image": open("./chicken-portrait.png", "rb"),
                    "style_image": open("./glowbot.png", "rb")
                },
                data={
                    "output_format": "webp"
                },
            )

            if response.status_code == 200:
                with open("./glow-chicken.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: |-
            import axios from "axios";
            import FormData from "form-data";
            import fs from "node:fs";

            const payload = {
                init_image: fs.createReadStream("./chicken-portrait.png"),
                style_image: fs.createReadStream("./glowbot.png"),
                output_format: "webp",
            };

            const response = await axios.postForm(
                `https://api.stability.ai/v2beta/stable-image/control/style-transfer`,
                axios.toFormData(payload, new FormData()),
                {
                    validateStatus: undefined,
                    responseType: "arraybuffer",
                    headers: {
                        Authorization: `Bearer sk-MYAPIKEY`,
                        Accept: "image/*"
                    },
                },
            );

            if (response.status === 200) {
                fs.writeFileSync("./glow-chicken.webp", Buffer.from(response.data));
            } else {
                throw new Error(`${response.status}: ${response.data.toString()}`);
            }
        - lang: terminal
          label: cURL
          source: |-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/control/style-transfer" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F init_image=@"./chicken-portrait.png" \
              -F style_image=@"./glowbot.png" \
              -F output_format="webp" \
              -o "./glow-chicken.webp"
      parameters:
        - schema:
            type: string
            description: Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                init_image:
                  type: string
                  description: |-
                    An image containing the subject you wish to restyle.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Width must be between 64 and 16,383 pixels
                    - Height must be between 64 and 16,383 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                    - The aspect ratio must be between 1:2.5 and 2.5:1
                  format: binary
                  example: ./some/image.png
                style_image:
                  type: string
                  description: |-
                    An image containing the new style.

                    Supported Formats:
                    - jpeg
                    - png
                    - webp

                    Validation Rules:
                    - Width must be between 64 and 16,383 pixels
                    - Height must be between 64 and 16,383 pixels
                    - Total pixel count must be between 4,096 and 9,437,184 pixels
                  format: binary
                  example: ./some/image.png
                prompt:
                  type: string
                  minLength: 0
                  maxLength: 10000
                  description: |-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.

                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: |-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                style_strength:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 1
                  description: |-
                    Sometimes referred to as _denoising_, this parameter controls how much influence the
                    `style_image` parameter has on the generated image. A value of 0 would yield an image that
                    is identical to the input. A value of 1 would be as if you passed in no image at all.
                composition_fidelity:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.9
                  description: How closely the output image's style resembles the input image's style.
                change_strength:
                  type: number
                  minimum: 0.1
                  maximum: 1
                  default: 0.9
                  description: How much the original image should change
                output_format:
                  type: string
                  enum:
                    - png
                    - jpeg
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
              required:
                - init_image
                - style_image
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.

                 To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: |-
                Indicates the reason the generation finished.

                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: |-
                The seed used as random noise for this generation.

                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: An internal error occurred. If the problem persists [contact support](https://stabilityplatform.freshdesk.com/support/tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: |-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - An unexpected server error has occurred, please try again later.
  /v1/generation/{engine_id}/text-to-image:
    post:
      description: |
        Generate an image from a text prompt. 
        ### Using SDXL 1.0
        Use `stable-diffusion-xl-1024-v1-0` as the `engine_id` of your request and pass in `height` & `width` as one of the following combinations:
        - 1024x1024 (default)
        - 1152x896
        - 896x1152
        - 1216x832
        - 1344x768
        - 768x1344
        - 1536x640
        - 640x1536 

        ### SDXL 1.0 Pricing
        When specifying 30 steps or fewer, generation costs 0.9 credits.

        When specifying above 30 steps, generation cost is determiend using the following formula:

         `cost = 0.9 * (steps / 30)`

        ### Using SD 1.6
        SD1.6 is a flexible-resolution base model allowing you to generate non-standard aspect ratios. The model is optimized for a resolution of 512 x 512 pixels. To generate 1 megapixel outputs, we recommend using SDXL 1.0, which is available at the same price.

        Pass in `stable-diffusion-v1-6` as the `engine_id` of your request and ensure the `height` & `width` you pass in adhere to the following restrictions:
        - No dimension can be less than 320 pixels
        - No dimension can be greater than 1536 pixels
        - Height and width must be specified in increments of 64
        - The default resolution is 512 x 512
      operationId: textToImage
      summary: Text-to-image
      tags:
        - SDXL 1.0 & SD1.6
      parameters:
        - $ref: '#/components/parameters/engineID'
        - $ref: '#/components/parameters/accept'
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/stabilityClientID'
        - $ref: '#/components/parameters/stabilityClientVersion'
      requestBody:
        content:
          application/json:
            example:
              cfg_scale: 7
              height: 512
              width: 512
              sampler: K_DPM_2_ANCESTRAL
              samples: 1
              steps: 30
              text_prompts:
                - text: A lighthouse on a cliff
                  weight: 1
            schema:
              $ref: '#/components/schemas/TextToImageRequestBody'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GenerationResponse'
        '400':
          $ref: '#/components/responses/400FromGeneration'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - STABILITY_API_KEY: []
      x-codeSamples:
        - lang: Python
          source: |
            import base64
            import os
            import requests

            engine_id = "stable-diffusion-v1-6"
            api_host = os.getenv('API_HOST', 'https://api.stability.ai')
            api_key = os.getenv("STABILITY_API_KEY")

            if api_key is None:
                raise Exception("Missing Stability API key.")

            response = requests.post(
                f"{api_host}/v1/generation/{engine_id}/text-to-image",
                headers={
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "Authorization": f"Bearer {api_key}"
                },
                json={
                    "text_prompts": [
                        {
                            "text": "A lighthouse on a cliff"
                        }
                    ],
                    "cfg_scale": 7,
                    "height": 1024,
                    "width": 1024,
                    "samples": 1,
                    "steps": 30,
                },
            )

            if response.status_code != 200:
                raise Exception("Non-200 response: " + str(response.text))

            data = response.json()

            for i, image in enumerate(data["artifacts"]):
                with open(f"./out/v1_txt2img_{i}.png", "wb") as f:
                    f.write(base64.b64decode(image["base64"]))
        - label: TypeScript
          lang: Javascript
          source: |
            import fetch from 'node-fetch'
            import fs from 'node:fs'

            const engineId = 'stable-diffusion-v1-6'
            const apiHost = process.env.API_HOST ?? 'https://api.stability.ai'
            const apiKey = process.env.STABILITY_API_KEY

            if (!apiKey) throw new Error('Missing Stability API key.')

            const response = await fetch(
              `${apiHost}/v1/generation/${engineId}/text-to-image`,
              {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  Accept: 'application/json',
                  Authorization: `Bearer ${apiKey}`,
                },
                body: JSON.stringify({
                  text_prompts: [
                    {
                      text: 'A lighthouse on a cliff',
                    },
                  ],
                  cfg_scale: 7,
                  height: 1024,
                  width: 1024,
                  steps: 30,
                  samples: 1,
                }),
              }
            )

            if (!response.ok) {
              throw new Error(`Non-200 response: ${await response.text()}`)
            }

            interface GenerationResponse {
              artifacts: Array<{
                base64: string
                seed: number
                finishReason: string
              }>
            }

            const responseJSON = (await response.json()) as GenerationResponse

            responseJSON.artifacts.forEach((image, index) => {
              fs.writeFileSync(
                `./out/v1_txt2img_${index}.png`,
                Buffer.from(image.base64, 'base64')
              )
            })
        - lang: Go
          source: "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n)\n\ntype TextToImageImage struct {\n\tBase64       string `json:\"base64\"`\n\tSeed         uint32 `json:\"seed\"`\n\tFinishReason string `json:\"finishReason\"`\n}\n\ntype TextToImageResponse struct {\n\tImages []TextToImageImage `json:\"artifacts\"`\n}\n\nfunc main() {\n\t// Build REST endpoint URL w/ specified engine\n\tengineId := \"stable-diffusion-v1-6\"\n\tapiHost, hasApiHost := os.LookupEnv(\"API_HOST\")\n\tif !hasApiHost {\n\t\tapiHost = \"https://api.stability.ai\"\n\t}\n\treqUrl := apiHost + \"/v1/generation/\" + engineId + \"/text-to-image\"\n\n\t// Acquire an API key from the environment\n\tapiKey, hasAPIKey := os.LookupEnv(\"STABILITY_API_KEY\")\n\tif !hasAPIKey {\n\t\tpanic(\"Missing STABILITY_API_KEY environment variable\")\n\t}\n\n\tvar data = []byte(`{\n\t\t\"text_prompts\": [\n\t\t  {\n\t\t\t\"text\": \"A lighthouse on a cliff\"\n\t\t  }\n\t\t],\n\t\t\"cfg_scale\": 7,\n\t\t\"height\": 1024,\n\t\t\"width\": 1024,\n\t\t\"samples\": 1,\n\t\t\"steps\": 30\n  \t}`)\n\n\treq, _ := http.NewRequest(\"POST\", reqUrl, bytes.NewBuffer(data))\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\treq.Header.Add(\"Accept\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer \"+apiKey)\n\n\t// Execute the request & read all the bytes of the body\n\tres, _ := http.DefaultClient.Do(req)\n\tdefer res.Body.Close()\n\n\tif res.StatusCode != 200 {\n\t\tvar body map[string]interface{}\n\t\tif err := json.NewDecoder(res.Body).Decode(&body); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tpanic(fmt.Sprintf(\"Non-200 response: %s\", body))\n\t}\n\n\t// Decode the JSON body\n\tvar body TextToImageResponse\n\tif err := json.NewDecoder(res.Body).Decode(&body); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Write the images to disk\n\tfor i, image := range body.Images {\n\t\toutFile := fmt.Sprintf(\"./out/v1_txt2img_%d.png\", i)\n\t\tfile, err := os.Create(outFile)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\timageBytes, err := base64.StdEncoding.DecodeString(image.Base64)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tif _, err := file.Write(imageBytes); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tif err := file.Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n"
        - lang: cURL
          source: |
            if [ -z "$STABILITY_API_KEY" ]; then
                echo "STABILITY_API_KEY environment variable is not set"
                exit 1
            fi

            OUTPUT_FILE=./out/v1_txt2img.png
            BASE_URL=${API_HOST:-https://api.stability.ai}
            URL="$BASE_URL/v1/generation/stable-diffusion-v1-6/text-to-image"

            curl -f -sS -X POST "$URL" \
              -H 'Content-Type: application/json' \
              -H 'Accept: image/png' \
              -H "Authorization: Bearer $STABILITY_API_KEY" \
              --data-raw '{
                "text_prompts": [
                  {
                    "text": "A lighthouse on a cliff"
                  }
                ],
                "cfg_scale": 7,
                "height": 1024,
                "width": 1024,
                "samples": 1,
                "steps": 30
              }' \
              -o "$OUTPUT_FILE"
  /v1/generation/{engine_id}/image-to-image:
    post:
      description: |-
        Produce an image from an existing image using a text prompt. 
        ### How to control strength of generation
        To preserve only roughly 35% of the initial image, pass in either `init_image_mode=IMAGE_STRENGTH` and `image_strength=0.35` or `init_image_mode=STEP_SCHEDULE` and `step_schedule_start=0.65`.  Both of these are equivalent, however `init_image_mode=STEP_SCHEDULE` also lets you pass in `step_schedule_end`, which can provide an extra level of control for those who need it.  For more details, see the specific fields below.  

        > NOTE: Only **Version 1** engines will work with this endpoint.
      operationId: imageToImage
      summary: Image-to-image with prompt
      tags:
        - SDXL 1.0 & SD1.6
      parameters:
        - $ref: '#/components/parameters/engineID'
        - $ref: '#/components/parameters/accept'
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/stabilityClientID'
        - $ref: '#/components/parameters/stabilityClientVersion'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageToImageRequestBody'
            examples:
              IMAGE_STRENGTH:
                summary: Using IMAGE_STRENGTH
                description: Request using 35% image_strength
                value:
                  image_strength: 0.35
                  init_image_mode: IMAGE_STRENGTH
                  init_image: <image binary>
                  text_prompts[0][text]: A dog space commander
                  text_prompts[0][weight]: 1
                  cfg_scale: 7
                  sampler: K_DPM_2_ANCESTRAL
                  samples: 3
                  steps: 30
              STEP_SCHEDULE:
                summary: Using STEP_SCHEDULE
                description: Equivalent request using step_schedule_start
                value:
                  step_schedule_start: 0.65
                  init_image_mode: STEP_SCHEDULE
                  init_image: <image binary>
                  text_prompts[0][text]: A dog space commander
                  text_prompts[0][weight]: 1
                  cfg_scale: 7
                  sampler: K_DPM_2_ANCESTRAL
                  samples: 3
                  steps: 30
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GenerationResponse'
        '400':
          $ref: '#/components/responses/400FromGeneration'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - STABILITY_API_KEY: []
      x-codeSamples:
        - lang: Python
          source: |
            import base64
            import os
            import requests

            engine_id = "stable-diffusion-v1-6"
            api_host = os.getenv("API_HOST", "https://api.stability.ai")
            api_key = os.getenv("STABILITY_API_KEY")

            if api_key is None:
                raise Exception("Missing Stability API key.")

            response = requests.post(
                f"{api_host}/v1/generation/{engine_id}/image-to-image",
                headers={
                    "Accept": "application/json",
                    "Authorization": f"Bearer {api_key}"
                },
                files={
                    "init_image": open("../init_image.png", "rb")
                },
                data={
                    "image_strength": 0.35,
                    "init_image_mode": "IMAGE_STRENGTH",
                    "text_prompts[0][text]": "Galactic dog with a cape",
                    "cfg_scale": 7,
                    "samples": 1,
                    "steps": 30,
                }
            )

            if response.status_code != 200:
                raise Exception("Non-200 response: " + str(response.text))

            data = response.json()

            for i, image in enumerate(data["artifacts"]):
                with open(f"./out/v1_img2img_{i}.png", "wb") as f:
                    f.write(base64.b64decode(image["base64"]))
        - label: TypeScript
          lang: Javascript
          source: |
            import fetch from 'node-fetch'
            import FormData from 'form-data'
            import fs from 'node:fs'

            const engineId = 'stable-diffusion-v1-6'
            const apiHost = process.env.API_HOST ?? 'https://api.stability.ai'
            const apiKey = process.env.STABILITY_API_KEY

            if (!apiKey) throw new Error('Missing Stability API key.')

            // NOTE: This example is using a NodeJS FormData library.
            // Browsers should use their native FormData class.
            // React Native apps should also use their native FormData class.
            const formData = new FormData()
            formData.append('init_image', fs.readFileSync('../init_image.png'))
            formData.append('init_image_mode', 'IMAGE_STRENGTH')
            formData.append('image_strength', 0.35)
            formData.append('text_prompts[0][text]', 'Galactic dog wearing a cape')
            formData.append('cfg_scale', 7)
            formData.append('samples', 1)
            formData.append('steps', 30)

            const response = await fetch(
              `${apiHost}/v1/generation/${engineId}/image-to-image`,
              {
                method: 'POST',
                headers: {
                  ...formData.getHeaders(),
                  Accept: 'application/json',
                  Authorization: `Bearer ${apiKey}`,
                },
                body: formData,
              }
            )

            if (!response.ok) {
              throw new Error(`Non-200 response: ${await response.text()}`)
            }

            interface GenerationResponse {
              artifacts: Array<{
                base64: string
                seed: number
                finishReason: string
              }>
            }

            const responseJSON = (await response.json()) as GenerationResponse

            responseJSON.artifacts.forEach((image, index) => {
              fs.writeFileSync(
                `out/v1_img2img_${index}.png`,
                Buffer.from(image.base64, 'base64')
              )
            })
        - lang: Go
          source: "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n)\n\ntype ImageToImageImage struct {\n\tBase64       string `json:\"base64\"`\n\tSeed         uint32 `json:\"seed\"`\n\tFinishReason string `json:\"finishReason\"`\n}\n\ntype ImageToImageResponse struct {\n\tImages []ImageToImageImage `json:\"artifacts\"`\n}\n\nfunc main() {\n\tengineId := \"stable-diffusion-v1-6\"\n\n\t// Build REST endpoint URL\n\tapiHost, hasApiHost := os.LookupEnv(\"API_HOST\")\n\tif !hasApiHost {\n\t\tapiHost = \"https://api.stability.ai\"\n\t}\n\treqUrl := apiHost + \"/v1/generation/\" + engineId + \"/image-to-image\"\n\n\t// Acquire an API key from the environment\n\tapiKey, hasAPIKey := os.LookupEnv(\"STABILITY_API_KEY\")\n\tif !hasAPIKey {\n\t\tpanic(\"Missing STABILITY_API_KEY environment variable\")\n\t}\n\n\tdata := &bytes.Buffer{}\n\twriter := multipart.NewWriter(data)\n\n\t// Write the init image to the request\n\tinitImageWriter, _ := writer.CreateFormField(\"init_image\")\n\tinitImageFile, initImageErr := os.Open(\"../init_image.png\")\n\tif initImageErr != nil {\n\t\tpanic(\"Could not open init_image.png\")\n\t}\n\t_, _ = io.Copy(initImageWriter, initImageFile)\n\n\t// Write the options to the request\n\t_ = writer.WriteField(\"init_image_mode\", \"IMAGE_STRENGTH\")\n\t_ = writer.WriteField(\"image_strength\", \"0.35\")\n\t_ = writer.WriteField(\"text_prompts[0][text]\", \"Galactic dog with a cape\")\n\t_ = writer.WriteField(\"cfg_scale\", \"7\")\n\t_ = writer.WriteField(\"samples\", \"1\")\n\t_ = writer.WriteField(\"steps\", \"30\")\n\twriter.Close()\n\n\t// Execute the request\n\tpayload := bytes.NewReader(data.Bytes())\n\treq, _ := http.NewRequest(\"POST\", reqUrl, payload)\n\treq.Header.Add(\"Content-Type\", writer.FormDataContentType())\n\treq.Header.Add(\"Accept\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer \"+apiKey)\n\tres, _ := http.DefaultClient.Do(req)\n\tdefer res.Body.Close()\n\n\tif res.StatusCode != 200 {\n\t\tvar body map[string]interface{}\n\t\tif err := json.NewDecoder(res.Body).Decode(&body); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tpanic(fmt.Sprintf(\"Non-200 response: %s\", body))\n\t}\n\n\t// Decode the JSON body\n\tvar body ImageToImageResponse\n\tif err := json.NewDecoder(res.Body).Decode(&body); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Write the images to disk\n\tfor i, image := range body.Images {\n\t\toutFile := fmt.Sprintf(\"./out/v1_img2img_%d.png\", i)\n\t\tfile, err := os.Create(outFile)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\timageBytes, err := base64.StdEncoding.DecodeString(image.Base64)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tif _, err := file.Write(imageBytes); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tif err := file.Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n"
        - lang: cURL
          source: |
            if [ -z "$STABILITY_API_KEY" ]; then
                echo "STABILITY_API_KEY environment variable is not set"
                exit 1
            fi

            OUTPUT_FILE=./out/v1_img2img.png
            BASE_URL=${API_HOST:-https://api.stability.ai}
            URL="$BASE_URL/v1/generation/stable-diffusion-v1-6/image-to-image"

            curl -f -sS -X POST "$URL" \
              -H 'Content-Type: multipart/form-data' \
              -H 'Accept: image/png' \
              -H "Authorization: Bearer $STABILITY_API_KEY" \
              -F 'init_image=@"../init_image.png"' \
              -F 'init_image_mode=IMAGE_STRENGTH' \
              -F 'image_strength=0.35' \
              -F 'text_prompts[0][text]=A galactic dog in space' \
              -F 'cfg_scale=7' \
              -F 'samples=1' \
              -F 'steps=30' \
              -o "$OUTPUT_FILE"
  /v1/generation/{engine_id}/image-to-image/masking:
    post:
      description: |-
        Selectively modify portions of an image using a mask. The `mask` must be the same shape and size as the init image. This endpoint also supports `image` parameters with alpha channels.  See below for more details. 

        > NOTE: Only **Version 1** engines will work with this endpoint.
      operationId: masking
      summary: Image-to-image with a mask
      tags:
        - SDXL 1.0 & SD1.6
      parameters:
        - example: stable-diffusion-xl-1024-v1-0
          in: path
          name: engine_id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/accept'
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/stabilityClientID'
        - $ref: '#/components/parameters/stabilityClientVersion'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaskingRequestBody'
            examples:
              MASK_IMAGE_BLACK:
                value:
                  mask_source: MASK_IMAGE_BLACK
                  init_image: <image binary>
                  mask_image: <image binary>
                  text_prompts[0][text]: A dog space commander
                  text_prompts[0][weight]: 1
                  cfg_scale: 7
                  sampler: K_DPM_2_ANCESTRAL
                  samples: 3
                  steps: 30
              MASK_IMAGE_WHITE:
                value:
                  mask_source: MASK_IMAGE_WHITE
                  init_image: <image binary>
                  mask_image: <image binary>
                  text_prompts[0][text]: A dog space commander
                  text_prompts[0][weight]: 1
                  cfg_scale: 7
                  sampler: K_DPM_2_ANCESTRAL
                  samples: 3
                  steps: 30
              INIT_IMAGE_ALPHA:
                value:
                  mask_source: INIT_IMAGE_ALPHA
                  init_image: <image binary>
                  text_prompts[0][text]: A dog space commander
                  text_prompts[0][weight]: 1
                  cfg_scale: 7
                  sampler: K_DPM_2_ANCESTRAL
                  samples: 3
                  steps: 30
      responses:
        '200':
          $ref: '#/components/responses/GenerationResponse'
        '400':
          $ref: '#/components/responses/400FromGeneration'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - STABILITY_API_KEY: []
      x-codeSamples:
        - lang: Python
          source: |
            import base64
            import os
            import requests

            engine_id = "stable-diffusion-v1-6"
            api_host = os.getenv('API_HOST', 'https://api.stability.ai')
            api_key = os.getenv("STABILITY_API_KEY")

            if api_key is None:
                raise Exception("Missing Stability API key.")

            response = requests.post(
                f"{api_host}/v1/generation/{engine_id}/image-to-image/masking",
                headers={
                    "Accept": 'application/json',
                    "Authorization": f"Bearer {api_key}"
                },
                files={
                    'init_image': open("../init_image.png", 'rb'),
                    'mask_image': open("../mask_image_black.png", 'rb'),
                },
                data={
                    "mask_source": "MASK_IMAGE_BLACK",
                    "text_prompts[0][text]": "A large spiral galaxy with a bright central bulge and a ring of stars around it",
                    "cfg_scale": 7,
                    "clip_guidance_preset": "FAST_BLUE",
                    "samples": 1,
                    "steps": 30,
                }
            )

            if response.status_code != 200:
                raise Exception("Non-200 response: " + str(response.text))

            data = response.json()

            for i, image in enumerate(data["artifacts"]):
                with open(f"./out/v1_img2img_masking_{i}.png", "wb") as f:
                    f.write(base64.b64decode(image["base64"]))
        - label: TypeScript
          lang: Javascript
          source: |
            import fetch from 'node-fetch'
            import FormData from 'form-data'
            import fs from 'node:fs'

            const engineId = 'stable-diffusion-v1-6'
            const apiHost = process.env.API_HOST ?? 'https://api.stability.ai'
            const apiKey = process.env.STABILITY_API_KEY

            if (!apiKey) throw new Error('Missing Stability API key.')

            // NOTE: This example is using a NodeJS FormData library. Browser
            // implementations should use their native FormData class. React Native
            // implementations should also use their native FormData class.
            const formData = new FormData()
            formData.append('init_image', fs.readFileSync('../init_image.png'))
            formData.append('mask_image', fs.readFileSync('../mask_image_black.png'))
            formData.append('mask_source', 'MASK_IMAGE_BLACK')
            formData.append(
              'text_prompts[0][text]',
              'A large spiral galaxy with a bright central bulge and a ring of stars around it'
            )
            formData.append('cfg_scale', '7')
            formData.append('clip_guidance_preset', 'FAST_BLUE')
            formData.append('samples', 1)
            formData.append('steps', 30)

            const response = await fetch(
              `${apiHost}/v1/generation/${engineId}/image-to-image/masking`,
              {
                method: 'POST',
                headers: {
                  ...formData.getHeaders(),
                  Accept: 'application/json',
                  Authorization: `Bearer ${apiKey}`,
                },
                body: formData,
              }
            )

            if (!response.ok) {
              throw new Error(`Non-200 response: ${await response.text()}`)
            }

            interface GenerationResponse {
              artifacts: Array<{
                base64: string
                seed: number
                finishReason: string
              }>
            }

            const responseJSON = (await response.json()) as GenerationResponse

            responseJSON.artifacts.forEach((image, index) => {
              fs.writeFileSync(
                `out/v1_img2img_masking_${index}.png`,
                Buffer.from(image.base64, 'base64')
              )
            })
        - lang: Go
          source: "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n)\n\ntype MaskingImage struct {\n\tBase64       string `json:\"base64\"`\n\tSeed         uint32 `json:\"seed\"`\n\tFinishReason string `json:\"finishReason\"`\n}\n\ntype MaskingResponse struct {\n\tImages []MaskingImage `json:\"artifacts\"`\n}\n\nfunc main() {\n\tengineId := \"stable-diffusion-v1-6\"\n\n\t// Build REST endpoint URL\n\tapiHost, hasApiHost := os.LookupEnv(\"API_HOST\")\n\tif !hasApiHost {\n\t\tapiHost = \"https://api.stability.ai\"\n\t}\n\treqUrl := apiHost + \"/v1/generation/\" + engineId + \"/image-to-image/masking\"\n\n\t// Acquire an API key from the environment\n\tapiKey, hasAPIKey := os.LookupEnv(\"STABILITY_API_KEY\")\n\tif !hasAPIKey {\n\t\tpanic(\"Missing STABILITY_API_KEY environment variable\")\n\t}\n\n\tdata := &bytes.Buffer{}\n\twriter := multipart.NewWriter(data)\n\n\t// Write the init image to the request\n\tinitImageWriter, _ := writer.CreateFormField(\"init_image\")\n\tinitImageFile, initImageErr := os.Open(\"../init_image.png\")\n\tif initImageErr != nil {\n\t\tpanic(\"Could not open init_image.png\")\n\t}\n\t_, _ = io.Copy(initImageWriter, initImageFile)\n\n\t// Write the mask image to the request\n\tmaskImageWriter, _ := writer.CreateFormField(\"mask_image\")\n\tmaskImageFile, maskImageErr := os.Open(\"../mask_image_black.png\")\n\tif maskImageErr != nil {\n\t\tpanic(\"Could not open mask_image_white.png\")\n\t}\n\t_, _ = io.Copy(maskImageWriter, maskImageFile)\n\n\t// Write the options to the request\n\t_ = writer.WriteField(\"mask_source\", \"MASK_IMAGE_BLACK\")\n\t_ = writer.WriteField(\"text_prompts[0][text]\", \"A large spiral galaxy with a bright central bulge and a ring of stars around it\")\n\t_ = writer.WriteField(\"cfg_scale\", \"7\")\n\t_ = writer.WriteField(\"clip_guidance_preset\", \"FAST_BLUE\")\n\t_ = writer.WriteField(\"samples\", \"1\")\n\t_ = writer.WriteField(\"steps\", \"30\")\n\twriter.Close()\n\n\t// Execute the request & read all the bytes of the response\n\tpayload := bytes.NewReader(data.Bytes())\n\treq, _ := http.NewRequest(\"POST\", reqUrl, payload)\n\treq.Header.Add(\"Content-Type\", writer.FormDataContentType())\n\treq.Header.Add(\"Accept\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer \"+apiKey)\n\tres, _ := http.DefaultClient.Do(req)\n\tdefer res.Body.Close()\n\n\tif res.StatusCode != 200 {\n\t\tvar body map[string]interface{}\n\t\tif err := json.NewDecoder(res.Body).Decode(&body); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tpanic(fmt.Sprintf(\"Non-200 response: %s\", body))\n\t}\n\n\t// Decode the JSON body\n\tvar body MaskingResponse\n\tif err := json.NewDecoder(res.Body).Decode(&body); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Write the images to disk\n\tfor i, image := range body.Images {\n\t\toutFile := fmt.Sprintf(\"./out/v1_img2img_masking_%d.png\", i)\n\t\tfile, err := os.Create(outFile)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\timageBytes, err := base64.StdEncoding.DecodeString(image.Base64)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tif _, err := file.Write(imageBytes); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tif err := file.Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n"
        - lang: cURL
          source: |
            #!/bin/sh

            set -e

            if [ -z "$STABILITY_API_KEY" ]; then
                echo "STABILITY_API_KEY environment variable is not set"
                exit 1
            fi

            OUTPUT_FILE=./out/v1_img2img_masking.png
            BASE_URL=${API_HOST:-https://api.stability.ai}
            URL="$BASE_URL/v1/generation/stable-diffusion-v1-6/image-to-image/masking"

            curl -f -sS -X POST "$URL" \
              -H 'Content-Type: multipart/form-data' \
              -H 'Accept: image/png' \
              -H "Authorization: Bearer $STABILITY_API_KEY" \
              -F 'init_image=@"../init_image.png"' \
              -F 'mask_image=@"../mask_image_black.png"' \
              -F 'mask_source=MASK_IMAGE_BLACK' \
              -F 'text_prompts[0][text]=A large spiral galaxy with a bright central bulge and a ring of stars around it' \
              -F 'cfg_scale=7' \
              -F 'clip_guidance_preset=FAST_BLUE' \
              -F 'samples=1' \
              -F 'steps=30' \
              -o "$OUTPUT_FILE"
  /v1/engines/list:
    get:
      description: List all engines available to your organization/user
      operationId: listEngines
      summary: List engines
      tags:
        - Engines
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/stabilityClientID'
        - $ref: '#/components/parameters/stabilityClientVersion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEnginesResponseBody'
          description: OK response.
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - STABILITY_API_KEY: []
      x-codeSamples:
        - lang: Python
          source: |+
            import os
            import requests

            api_host = os.getenv('API_HOST', 'https://api.stability.ai')
            url = f"{api_host}/v1/engines/list"

            api_key = os.getenv("STABILITY_API_KEY")
            if api_key is None:
                raise Exception("Missing Stability API key.")

            response = requests.get(url, headers={
                "Authorization": f"Bearer {api_key}"
            })

            if response.status_code != 200:
                raise Exception("Non-200 response: " + str(response.text))

            # Do something with the payload...
            payload = response.json()

        - label: TypeScript
          lang: Javascript
          source: |
            import fetch from 'node-fetch'

            const apiHost = process.env.API_HOST ?? 'https://api.stability.ai'
            const url = `${apiHost}/v1/engines/list`

            const apiKey = process.env.STABILITY_API_KEY
            if (!apiKey) throw new Error('Missing Stability API key.')

            const response = await fetch(url, {
              method: 'GET',
              headers: {
                Authorization: `Bearer ${apiKey}`,
              },
            })

            if (!response.ok) {
              throw new Error(`Non-200 response: ${await response.text()}`)
            }

            interface Payload {
              engines: Array<{
                id: string
                name: string
                description: string
                type: string
              }>
            }

            // Do something with the payload...
            const payload = (await response.json()) as Payload
        - lang: Go
          source: "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\t// Build REST endpoint URL\n\tapiHost, hasApiHost := os.LookupEnv(\"API_HOST\")\n\tif !hasApiHost {\n\t\tapiHost = \"https://api.stability.ai\"\n\t}\n\treqUrl := apiHost + \"/v1/engines/list\"\n\n\t// Acquire an API key from the environment\n\tapiKey, hasAPIKey := os.LookupEnv(\"STABILITY_API_KEY\")\n\tif !hasAPIKey {\n\t\tpanic(\"Missing STABILITY_API_KEY environment variable\")\n\t}\n\n\t// Execute the request & read all the bytes of the response\n\treq, _ := http.NewRequest(\"GET\", reqUrl, nil)\n\treq.Header.Add(\"Authorization\", \"Bearer \"+apiKey)\n\tres, _ := http.DefaultClient.Do(req)\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tif res.StatusCode != 200 {\n\t\tpanic(\"Non-200 response: \" + string(body))\n\t}\n\n\t// Do something with the payload...\n\t// payload := string(body)\n}\n"
        - lang: cURL
          source: |
            if [ -z "$STABILITY_API_KEY" ]; then
                echo "STABILITY_API_KEY environment variable is not set"
                exit 1
            fi

            BASE_URL=${API_HOST:-https://api.stability.ai}
            URL="$BASE_URL/v1/engines/list"

            curl -f -sS "$URL" \
              -H 'Accept: application/json' \
              -H "Authorization: Bearer $STABILITY_API_KEY"
  /v1/user/account:
    get:
      description: Get information about the account associated with the provided API key
      operationId: userAccount
      summary: Account details
      tags:
        - User
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponseBody'
          description: OK response.
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - STABILITY_API_KEY: []
      x-codeSamples:
        - lang: Python
          source: |+
            import os
            import requests

            api_host = os.getenv('API_HOST', 'https://api.stability.ai')
            url = f"{api_host}/v1/user/account"

            api_key = os.getenv("STABILITY_API_KEY")
            if api_key is None:
                raise Exception("Missing Stability API key.")

            response = requests.get(url, headers={
                "Authorization": f"Bearer {api_key}"
            })

            if response.status_code != 200:
                raise Exception("Non-200 response: " + str(response.text))

            # Do something with the payload...
            payload = response.json()

        - label: TypeScript
          lang: Javascript
          source: |
            import fetch from 'node-fetch'

            const apiHost = process.env.API_HOST ?? 'https://api.stability.ai'
            const url = `${apiHost}/v1/user/account`

            const apiKey = process.env.STABILITY_API_KEY
            if (!apiKey) throw new Error('Missing Stability API key.')

            const response = await fetch(url, {
              method: 'GET',
              headers: {
                Authorization: `Bearer ${apiKey}`,
              },
            })

            if (!response.ok) {
              throw new Error(`Non-200 response: ${await response.text()}`)
            }

            interface User {
              id: string
              profile_picture: string
              email: string
              organizations?: Array<{
                id: string
                name: string
                role: string
                is_default: boolean
              }>
            }

            // Do something with the user...
            const user = (await response.json()) as User
        - lang: Go
          source: "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\t// Build REST endpoint URL\n\tapiHost, hasApiHost := os.LookupEnv(\"API_HOST\")\n\tif !hasApiHost {\n\t\tapiHost = \"https://api.stability.ai\"\n\t}\n\treqUrl := apiHost + \"/v1/user/account\"\n\n\t// Acquire an API key from the environment\n\tapiKey, hasAPIKey := os.LookupEnv(\"STABILITY_API_KEY\")\n\tif !hasAPIKey {\n\t\tpanic(\"Missing STABILITY_API_KEY environment variable\")\n\t}\n\n\t// Build the request\n\treq, _ := http.NewRequest(\"GET\", reqUrl, nil)\n\treq.Header.Add(\"Authorization\", \"Bearer \"+apiKey)\n\n\t// Execute the request\n\tres, _ := http.DefaultClient.Do(req)\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tif res.StatusCode != 200 {\n\t\tpanic(\"Non-200 response: \" + string(body))\n\t}\n\n\t// Do something with the payload...\n\t// payload := string(body)\n}\n"
        - lang: cURL
          source: |
            if [ -z "$STABILITY_API_KEY" ]; then
                echo "STABILITY_API_KEY environment variable is not set"
                exit 1
            fi

            # Determine the URL to use for the request
            BASE_URL=${API_HOST:-https://api.stability.ai}
            URL="$BASE_URL/v1/user/account"

            curl -f -sS "$URL" \
              -H 'Accept: application/json' \
              -H "Authorization: Bearer $STABILITY_API_KEY"
  /v1/user/balance:
    get:
      description: Get the credit balance of the account/organization associated with the API key
      operationId: userBalance
      summary: Account balance
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/organization'
        - $ref: '#/components/parameters/stabilityClientID'
        - $ref: '#/components/parameters/stabilityClientVersion'
      responses:
        '200':
          content:
            application/json:
              example:
                credits: 0.6336833840314097
              schema:
                $ref: '#/components/schemas/BalanceResponseBody'
          description: OK response.
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - STABILITY_API_KEY: []
      x-codeSamples:
        - lang: Python
          source: |+
            import os
            import requests

            api_host = os.getenv('API_HOST', 'https://api.stability.ai')
            url = f"{api_host}/v1/user/balance"

            api_key = os.getenv("STABILITY_API_KEY")
            if api_key is None:
                raise Exception("Missing Stability API key.")

            response = requests.get(url, headers={
                "Authorization": f"Bearer {api_key}"
            })

            if response.status_code != 200:
                raise Exception("Non-200 response: " + str(response.text))

            # Do something with the payload...
            payload = response.json()

        - label: TypeScript
          lang: Javascript
          source: |
            import fetch from 'node-fetch'

            const apiHost = process.env.API_HOST ?? 'https://api.stability.ai'
            const url = `${apiHost}/v1/user/balance`

            const apiKey = process.env.STABILITY_API_KEY
            if (!apiKey) throw new Error('Missing Stability API key.')

            const response = await fetch(url, {
              method: 'GET',
              headers: {
                Authorization: `Bearer ${apiKey}`,
              },
            })

            if (!response.ok) {
              throw new Error(`Non-200 response: ${await response.text()}`)
            }

            interface Balance {
              credits: number
            }

            // Do something with the balance...
            const balance = (await response.json()) as Balance
        - lang: Go
          source: "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\t// Build REST endpoint URL\n\tapiHost, hasApiHost := os.LookupEnv(\"API_HOST\")\n\tif !hasApiHost {\n\t\tapiHost = \"https://api.stability.ai\"\n\t}\n\treqUrl := apiHost + \"/v1/user/balance\"\n\n\t// Acquire an API key from the environment\n\tapiKey, hasAPIKey := os.LookupEnv(\"STABILITY_API_KEY\")\n\tif !hasAPIKey {\n\t\tpanic(\"Missing STABILITY_API_KEY environment variable\")\n\t}\n\n\t// Build the request\n\treq, _ := http.NewRequest(\"GET\", reqUrl, nil)\n\treq.Header.Add(\"Authorization\", \"Bearer \"+apiKey)\n\n\t// Execute the request\n\tres, _ := http.DefaultClient.Do(req)\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tif res.StatusCode != 200 {\n\t\tpanic(\"Non-200 response: \" + string(body))\n\t}\n\n\t// Do something with the payload...\n\t// payload := string(body)\n}\n"
        - lang: cURL
          source: |
            if [ -z "$STABILITY_API_KEY" ]; then
                echo "STABILITY_API_KEY environment variable is not set"
                exit 1
            fi

            # Determine the URL to use for the request
            BASE_URL=${API_HOST:-https://api.stability.ai}
            URL="$BASE_URL/v1/user/balance"

            curl -f -sS "$URL" \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $STABILITY_API_KEY"
components:
  schemas:
    GenerationID:
      type: string
      minLength: 64
      maxLength: 64
      description: The `id` of a generation, typically used for async generations, that can be used to check the status of the generation or retrieve the result.
      example: a6dc6c6e20acda010fe14d71f180658f2896ed9b4ec25aa99a6ff06c796987c4
    ImageToVideoRequest:
      type: object
      properties:
        image:
          type: string
          description: |-
            The source image used in the video generation process.

            Supported Formats:
            - jpeg
            - png

            Supported Dimensions:
            - 1024x576
            - 576x1024
            - 768x768
          format: binary
          example: ./some/image.png
        seed:
          type: number
          minimum: 0
          maximum: 4294967294
          default: 0
          description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
        cfg_scale:
          type: number
          minimum: 0
          maximum: 10
          default: 1.8
          description: How strongly the video sticks to the original image. Use lower values to allow the model more freedom to make changes and higher values to correct motion distortions.
        motion_bucket_id:
          type: number
          minimum: 1
          maximum: 255
          default: 127
          description: Lower values generally result in less motion in the output video, while higher values generally result in more motion. This parameter corresponds to the motion_bucket_id parameter from the [paper](https://static1.squarespace.com/static/6213c340453c3f502425776e/t/655ce779b9d47d342a93c890/1700587395994/stable_video_diffusion.pdf).
      required:
        - image
    ContentModerationResponse:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: |-
            A unique identifier associated with this error. Please include this in any [support tickets](https://stabilityplatform.freshdesk.com/support/tickets/new)
            you file, as it will greatly assist us in diagnosing the root cause of the problem.
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: |-
            Our content moderation system has flagged some part of your request and subsequently denied it.  You were not charged for this request.  While this may at times be frustrating, it is necessary to maintain the integrity of our platform and ensure a safe experience for all users.

            If you would like to provide feedback, please use the [Support Form](https://stabilityplatform.freshdesk.com/support/tickets/new).
          enum:
            - content_moderation
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
            - 'some-field: is required'
      required:
        - id
        - name
        - errors
      description: Your request was flagged by our content moderation system.
      example:
        id: ed14db44362126aab3cbd25cca51ffe3
        name: content_moderation
        errors:
          - Your request was flagged by our content moderation system, as a result your request was denied and you were not charged.
    InpaintingSearchModeRequestBody:
      type: object
      properties:
        mode:
          type: string
          enum:
            - search
          description: |-
            Controls how the model decides which areas to inpaint and which areas to leave alone.  

            Specifying `mask` requires:
              - Provide an explicit mask image in the `mask` parameter
              - Use the alpha channel of the `image` parameter as the mask
              
            Specifying `search` requires:
              - Provide a small description of what to inpaint in the `search_prompt` parameter
        search_prompt:
          type: string
          description: Short description of what to inpaint in the `image`.
          example: glasses
        image:
          type: string
          description: |-
            The image you wish to inpaint.

            Supported Formats:
            - jpeg
            - png
            - webp

            Validation Rules:
            - Every side must be at least 64 pixels
            - Total pixel count must be between 4,096 and 9,437,184 pixels
          format: binary
          example: ./some/image.png
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
          description: |-
            What you wish to see in the output image. A strong, descriptive prompt that clearly defines
            elements, colors, and subjects will lead to better results.

            To control the weight of a given word use the format `(word:weight)`,
            where `word` is the word you'd like to control the weight of and `weight`
            is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
            would convey a sky that was blue and green, but more green than blue.
        negative_prompt:
          type: string
          maxLength: 10000
          description: |-
            A blurb of text describing what you **do not** wish to see in the output image.
            This is an advanced feature.
        seed:
          type: number
          minimum: 0
          maximum: 4294967294
          default: 0
          description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
        output_format:
          type: string
          enum:
            - jpeg
            - png
            - webp
          default: png
          description: Dictates the `content-type` of the generated image.
      required:
        - image
        - prompt
        - mode
        - search_prompt
    InpaintingMaskingModeRequestBody:
      type: object
      properties:
        mode:
          type: string
          enum:
            - mask
          description: |-
            Controls how the model decides which areas to inpaint and which areas to leave alone.  

            Specifying `mask` requires:
              - Provide an explicit mask image in the `mask` parameter
              - Use the alpha channel of the `image` parameter as the mask
              
            Specifying `search` requires:
              - Provide a small description of what to inpaint in the `search_prompt` parameter
        mask:
          type: string
          description: |-
            Controls the strength of the inpainting process on a per-pixel basis, either via a 
            second image (passed into this parameter) or via the alpha channel of the `image` parameter.

            **Passing in a Mask**  

            The image passed to this parameter should be a black and white image that represents, 
            at any pixel, the strength of inpainting based on how dark or light the given pixel is. 
            Completely black pixels represent no inpainting strength while completely white pixels 
            represent maximum strength.

            In the event the mask is a different size than the `image` parameter, it will be automatically resized.

            **Alpha Channel Support**

            If you don't provide an explicit mask, one will be derived from the alpha channel of the `image` parameter.
            Transparent pixels will be inpainted while opaque pixels will be preserved.

            In the event an `image` with an alpha channel is provided along with a `mask`, the `mask` will take precedence.
          format: binary
          example: ./some/image.png
        image:
          type: string
          description: |-
            The image you wish to inpaint.

            Supported Formats:
            - jpeg
            - png
            - webp

            Validation Rules:
            - Every side must be at least 64 pixels
            - Total pixel count must be between 4,096 and 9,437,184 pixels
          format: binary
          example: ./some/image.png
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
          description: |-
            What you wish to see in the output image. A strong, descriptive prompt that clearly defines
            elements, colors, and subjects will lead to better results.

            To control the weight of a given word use the format `(word:weight)`,
            where `word` is the word you'd like to control the weight of and `weight`
            is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
            would convey a sky that was blue and green, but more green than blue.
        negative_prompt:
          type: string
          maxLength: 10000
          description: |-
            A blurb of text describing what you **do not** wish to see in the output image.
            This is an advanced feature.
        seed:
          type: number
          minimum: 0
          maximum: 4294967294
          default: 0
          description: A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
        output_format:
          type: string
          enum:
            - jpeg
            - png
            - webp
          default: png
          description: Dictates the `content-type` of the generated image.
      required:
        - image
        - prompt
        - mode
    StabilityClientID:
      type: string
      maxLength: 256
      description: The name of your application, used to help us communicate app-specific debugging or moderation issues to you.
      example: my-awesome-app
    StabilityClientUserID:
      type: string
      maxLength: 256
      description: A unique identifier for your end user. Used to help us communicate user-specific debugging or moderation issues to you. Feel free to obfuscate this value to protect user privacy.
      example: DiscordUser#9999
    StabilityClientVersion:
      type: string
      maxLength: 256
      description: The version of your application, used to help us communicate version-specific debugging or moderation issues to you.
      example: 1.2.1
    Creativity:
      type: number
      minimum: 0.2
      maximum: 0.5
      default: 0.35
      description: Controls the likelihood of creating additional details not heavily conditioned by the init image.
    Engine:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
          x-go-name: ID
          description: Unique identifier for the engine
          example: stable-diffusion-v1-6
        name:
          type: string
          description: Name of the engine
          example: Stable Diffusion XL v1.0
        type:
          type: string
          description: The type of content this engine produces
          example: PICTURE
          enum:
            - AUDIO
            - CLASSIFICATION
            - PICTURE
            - STORAGE
            - TEXT
            - VIDEO
      required:
        - id
        - name
        - description
        - type
    Error:
      type: object
      x-go-name: RESTError
      properties:
        id:
          x-go-name: ID
          type: string
          description: A unique identifier for this particular occurrence of the problem.
          example: 296a972f-666a-44a1-a3df-c9c28a1f56c0
        name:
          type: string
          description: The short-name of this class of errors e.g. `bad_request`.
          example: bad_request
        message:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Header parameter Authorization is required, but not found
      required:
        - name
        - id
        - message
        - status
    CfgScale:
      type: number
      description: How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
      default: 7
      example: 7
      minimum: 0
      maximum: 35
    ClipGuidancePreset:
      type: string
      default: NONE
      example: FAST_BLUE
      enum:
        - FAST_BLUE
        - FAST_GREEN
        - NONE
        - SIMPLE
        - SLOW
        - SLOWER
        - SLOWEST
    UpscaleImageHeight:
      x-go-type: uint64
      type: integer
      description: Desired height of the output image.  Only one of `width` or `height` may be specified.
      minimum: 512
    UpscaleImageWidth:
      x-go-type: uint64
      type: integer
      description: Desired width of the output image.  Only one of `width` or `height` may be specified.
      minimum: 512
    DiffuseImageHeight:
      x-go-type: uint64
      type: integer
      description: Height of the image to generate, in pixels, in an increment divisible by 64.
      multipleOf: 64
      default: 512
      example: 512
      minimum: 128
    DiffuseImageWidth:
      x-go-type: uint64
      type: integer
      description: Width of the image to generate, in pixels, in an increment divisible by 64.
      multipleOf: 64
      default: 512
      example: 512
      minimum: 128
    Sampler:
      type: string
      description: Which sampler to use for the diffusion process. If this value is omitted we'll automatically select an appropriate sampler for you.
      example: K_DPM_2_ANCESTRAL
      enum:
        - DDIM
        - DDPM
        - K_DPMPP_2M
        - K_DPMPP_2S_ANCESTRAL
        - K_DPM_2
        - K_DPM_2_ANCESTRAL
        - K_EULER
        - K_EULER_ANCESTRAL
        - K_HEUN
        - K_LMS
    Samples:
      x-go-type: uint64
      type: integer
      description: Number of images to generate
      default: 1
      example: 1
      minimum: 1
      maximum: 10
    Seed:
      type: integer
      x-go-type: uint32
      description: Random noise seed (omit this option or use `0` for a random seed)
      default: 0
      example: 0
      minimum: 0
      maximum: 4294967295
    Steps:
      x-go-type: uint64
      type: integer
      description: Number of diffusion steps to run.
      default: 30
      example: 50
      minimum: 10
      maximum: 50
    Extras:
      type: object
      description: |-
        Extra parameters passed to the engine.
        These parameters are used for in-development or experimental features and may change
        without warning, so please use with caution.
    StylePreset:
      type: string
      enum:
        - enhance
        - anime
        - photographic
        - digital-art
        - comic-book
        - fantasy-art
        - line-art
        - analog-film
        - neon-punk
        - isometric
        - low-poly
        - origami
        - modeling-compound
        - cinematic
        - 3d-model
        - pixel-art
        - tile-texture
      description: |-
        Pass in a style preset to guide the image model towards a particular style.
        This list of style presets is subject to change.
    TextPrompt:
      type: object
      properties:
        text:
          type: string
          description: The prompt itself
          example: A lighthouse on a cliff
          maxLength: 2000
        weight:
          type: number
          description: Weight of the prompt (use negative numbers for negative prompts)
          example: 0.8167237
          format: float
      description: Text prompt for image generation
      required:
        - text
    TextPromptsForTextToImage:
      title: TextPrompts
      type: array
      items:
        $ref: '#/components/schemas/TextPrompt'
      minItems: 1
      description: |-
        An array of text prompts to use for generation.

        Given a text prompt with the text `A lighthouse on a cliff` and a weight of `0.5`, it would be represented as:

        ```
        "text_prompts": [
          {
            "text": "A lighthouse on a cliff",
            "weight": 0.5
          }
        ]
        ```
    TextPrompts:
      description: |-
        An array of text prompts to use for generation.

        Due to how arrays are represented in `multipart/form-data` requests, prompts must adhere to the format `text_prompts[index][text|weight]`,
        where `index` is some integer used to tie the text and weight together.  While `index` does not have to be sequential, duplicate entries 
        will override previous entries, so it is recommended to use sequential indices.

        Given a text prompt with the text `A lighthouse on a cliff` and a weight of `0.5`, it would be represented as:
        ```
        text_prompts[0][text]: "A lighthouse on a cliff"
        text_prompts[0][weight]: 0.5
        ```

        To add another prompt to that request simply provide the values under a new `index`:

        ```
        text_prompts[0][text]: "A lighthouse on a cliff"
        text_prompts[0][weight]: 0.5
        text_prompts[1][text]: "land, ground, dirt, grass"
        text_prompts[1][weight]: -0.9
        ```
      type: array
      items:
        $ref: '#/components/schemas/TextPrompt'
      minItems: 1
    InputImage:
      x-go-type: '[]byte'
      type: string
      description: The image to upscale using ESRGAN.
      example: <image binary>
      format: binary
    InitImage:
      x-go-type: '[]byte'
      type: string
      description: Image used to initialize the diffusion process, in lieu of random noise.
      example: <image binary>
      format: binary
    InitImageStrength:
      type: number
      description: |
        How much influence the `init_image` has on the diffusion process. Values close to `1` will yield images very similar to the `init_image` while values close to `0` will yield images wildly different than the `init_image`. The behavior of this is meant to mirror DreamStudio's "Image Strength" slider.  <br/> <br/> This parameter is just an alternate way to set `step_schedule_start`, which is done via the calculation `1 - image_strength`. For example, passing in an Image Strength of 35% (`0.35`) would result in a `step_schedule_start` of `0.65`.
      example: 0.4
      minimum: 0
      maximum: 1
      format: float
      default: 0.35
    InitImageMode:
      type: string
      description: Whether to use `image_strength` or `step_schedule_*` to control how much influence the `init_image` has on the result.
      enum:
        - IMAGE_STRENGTH
        - STEP_SCHEDULE
      default: IMAGE_STRENGTH
    StepScheduleStart:
      type: number
      description: Skips a proportion of the start of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.  (e.g. a value of `0` would simply return you the init_image, where a value of `1` would return you a completely different image.)
      default: 0.65
      example: 0.4
      minimum: 0
      maximum: 1
    StepScheduleEnd:
      type: number
      description: Skips a proportion of the end of the diffusion steps, allowing the init_image to influence the final generated image.  Lower values will result in more influence from the init_image, while higher values will result in more influence from the diffusion steps.
      example: 0.01
      minimum: 0
      maximum: 1
    MaskImage:
      x-go-type: '[]byte'
      type: string
      description: Optional grayscale mask that allows for influence over which pixels are eligible for diffusion and at what strength. Must be the same dimensions as the `init_image`. Use the `mask_source` option to specify whether the white or black pixels should be inpainted.
      example: <image binary>
      format: binary
    MaskSource:
      type: string
      description: |-
        For any given pixel, the mask determines the strength of generation on a linear scale.  This parameter determines where to source the mask from:
        - `MASK_IMAGE_WHITE` will use the white pixels of the mask_image as the mask, where white pixels are completely replaced and black pixels are unchanged
        - `MASK_IMAGE_BLACK` will use the black pixels of the mask_image as the mask, where black pixels are completely replaced and white pixels are unchanged
        - `INIT_IMAGE_ALPHA` will use the alpha channel of the init_image as the mask, where fully transparent pixels are completely replaced and fully opaque pixels are unchanged
    GenerationRequestOptionalParams:
      type: object
      description: Represents the optional parameters that can be passed to any generation request.
      properties:
        cfg_scale:
          $ref: '#/components/schemas/CfgScale'
        clip_guidance_preset:
          $ref: '#/components/schemas/ClipGuidancePreset'
        sampler:
          $ref: '#/components/schemas/Sampler'
        samples:
          $ref: '#/components/schemas/Samples'
        seed:
          $ref: '#/components/schemas/Seed'
        steps:
          $ref: '#/components/schemas/Steps'
        style_preset:
          $ref: '#/components/schemas/StylePreset'
        extras:
          $ref: '#/components/schemas/Extras'
    RealESRGANUpscaleRequestBody:
      type: object
      properties:
        image:
          $ref: '#/components/schemas/InputImage'
        width:
          $ref: '#/components/schemas/UpscaleImageWidth'
        height:
          $ref: '#/components/schemas/UpscaleImageHeight'
      required:
        - image
    ImageToImageRequestBody:
      type: object
      properties:
        text_prompts:
          $ref: '#/components/schemas/TextPrompts'
        init_image:
          $ref: '#/components/schemas/InitImage'
        init_image_mode:
          $ref: '#/components/schemas/InitImageMode'
        image_strength:
          $ref: '#/components/schemas/InitImageStrength'
        step_schedule_start:
          $ref: '#/components/schemas/StepScheduleStart'
        step_schedule_end:
          $ref: '#/components/schemas/StepScheduleEnd'
        cfg_scale:
          $ref: '#/components/schemas/CfgScale'
        clip_guidance_preset:
          $ref: '#/components/schemas/ClipGuidancePreset'
        sampler:
          $ref: '#/components/schemas/Sampler'
        samples:
          $ref: '#/components/schemas/Samples'
        seed:
          $ref: '#/components/schemas/Seed'
        steps:
          $ref: '#/components/schemas/Steps'
        style_preset:
          $ref: '#/components/schemas/StylePreset'
        extras:
          $ref: '#/components/schemas/Extras'
      required:
        - text_prompts
        - init_image
      discriminator:
        propertyName: init_image_mode
        mapping:
          IMAGE_STRENGTH: '#/components/schemas/ImageToImageUsingImageStrengthRequestBody'
          STEP_SCHEDULE: '#/components/schemas/ImageToImageUsingStepScheduleRequestBody'
    ImageToImageUsingImageStrengthRequestBody:
      allOf:
        - type: object
          properties:
            text_prompts:
              $ref: '#/components/schemas/TextPrompts'
            init_image:
              $ref: '#/components/schemas/InitImage'
            init_image_mode:
              $ref: '#/components/schemas/InitImageMode'
            image_strength:
              $ref: '#/components/schemas/InitImageStrength'
          required:
            - text_prompts
            - init_image
        - $ref: '#/components/schemas/GenerationRequestOptionalParams'
    ImageToImageUsingStepScheduleRequestBody:
      allOf:
        - type: object
          properties:
            text_prompts:
              $ref: '#/components/schemas/TextPrompts'
            init_image:
              $ref: '#/components/schemas/InitImage'
            init_image_mode:
              $ref: '#/components/schemas/InitImageMode'
            step_schedule_start:
              $ref: '#/components/schemas/StepScheduleStart'
            step_schedule_end:
              $ref: '#/components/schemas/StepScheduleEnd'
          required:
            - text_prompts
            - init_image
        - $ref: '#/components/schemas/GenerationRequestOptionalParams'
    MaskingRequestBody:
      type: object
      properties:
        init_image:
          $ref: '#/components/schemas/InitImage'
        mask_source:
          $ref: '#/components/schemas/MaskSource'
        mask_image:
          $ref: '#/components/schemas/MaskImage'
        text_prompts:
          $ref: '#/components/schemas/TextPrompts'
        cfg_scale:
          $ref: '#/components/schemas/CfgScale'
        clip_guidance_preset:
          $ref: '#/components/schemas/ClipGuidancePreset'
        sampler:
          $ref: '#/components/schemas/Sampler'
        samples:
          $ref: '#/components/schemas/Samples'
        seed:
          $ref: '#/components/schemas/Seed'
        steps:
          $ref: '#/components/schemas/Steps'
        style_preset:
          $ref: '#/components/schemas/StylePreset'
        extras:
          $ref: '#/components/schemas/Extras'
      required:
        - text_prompts
        - init_image
        - mask_source
      discriminator:
        propertyName: mask_source
        mapping:
          MASK_IMAGE_BLACK: '#/components/schemas/MaskingUsingMaskImageRequestBody'
          MASK_IMAGE_WHITE: '#/components/schemas/MaskingUsingMaskImageRequestBody'
          INIT_IMAGE_ALPHA: '#/components/schemas/MaskingUsingInitImageAlphaRequestBody'
    MaskingUsingMaskImageRequestBody:
      allOf:
        - type: object
          properties:
            text_prompts:
              $ref: '#/components/schemas/TextPrompts'
            init_image:
              $ref: '#/components/schemas/InitImage'
            mask_source:
              $ref: '#/components/schemas/MaskSource'
            mask_image:
              $ref: '#/components/schemas/MaskImage'
          required:
            - init_image
            - mask_image
            - text_prompts
            - mask_source
        - $ref: '#/components/schemas/GenerationRequestOptionalParams'
    MaskingUsingInitImageAlphaRequestBody:
      allOf:
        - type: object
          properties:
            text_prompts:
              $ref: '#/components/schemas/TextPrompts'
            init_image:
              $ref: '#/components/schemas/InitImage'
            mask_source:
              $ref: '#/components/schemas/MaskSource'
          required:
            - init_image
            - text_prompts
            - mask_source
        - $ref: '#/components/schemas/GenerationRequestOptionalParams'
    TextToImageRequestBody:
      type: object
      allOf:
        - type: object
          properties:
            height:
              $ref: '#/components/schemas/DiffuseImageHeight'
            width:
              $ref: '#/components/schemas/DiffuseImageWidth'
            text_prompts:
              $ref: '#/components/schemas/TextPromptsForTextToImage'
          required:
            - text_prompts
        - $ref: '#/components/schemas/GenerationRequestOptionalParams'
      example:
        cfg_scale: 7
        height: 512
        width: 512
        sampler: K_DPM_2_ANCESTRAL
        samples: 1
        seed: 0
        steps: 30
        text_prompts:
          - text: A lighthouse on a cliff
            weight: 1
      required:
        - text_prompts
    AccountResponseBody:
      type: object
      properties:
        email:
          type: string
          description: The user's email
          example: example@stability.ai
          format: email
        id:
          type: string
          description: The user's ID
          example: user-1234
          x-go-name: ID
        organizations:
          type: array
          example:
            - id: org-5678
              name: Another Organization
              role: MEMBER
              is_default: true
            - id: org-1234
              name: My Organization
              role: MEMBER
              is_default: false
          items:
            $ref: '#/components/schemas/OrganizationMembership'
          description: The user's organizations
        profile_picture:
          type: string
          description: The user's profile picture
          example: https://api.stability.ai/example.png
          format: uri
      required:
        - id
        - email
        - organizations
    BalanceResponseBody:
      type: object
      properties:
        credits:
          type: number
          description: The balance of the account/organization associated with the API key
          example: 0.41122252265928866
          format: double
      example:
        credits: 0.07903292496944721
      required:
        - credits
    ListEnginesResponseBody:
      type: array
      description: The engines available to your user/organization
      items:
        $ref: '#/components/schemas/Engine'
      example:
        - description: Stability-AI Stable Diffusion v1.6
          id: stable-diffusion-v1-6
          name: Stable Diffusion v1.6
          type: PICTURE
        - description: Stability-AI Stable Diffusion XL v1.0
          id: stable-diffusion-xl-1024-v1-0
          name: Stable Diffusion XL v1.0
          type: PICTURE
    FinishReason:
      type: string
      description: |-
        The result of the generation process.
        - `SUCCESS` indicates success
        - `ERROR` indicates an error
        - `CONTENT_FILTERED` indicates the result affected by the content filter and may be blurred.

        This header is only present when the `Accept` is set to `image/png`.  Otherwise it is returned in the response body.
      enum:
        - SUCCESS
        - ERROR
        - CONTENT_FILTERED
    Image:
      type: object
      properties:
        base64:
          type: string
          x-go-type-skip-optional-pointer: true
          description: Image encoded in base64
        finishReason:
          type: string
          x-go-type-skip-optional-pointer: true
          example: CONTENT_FILTERED
          enum:
            - SUCCESS
            - ERROR
            - CONTENT_FILTERED
        seed:
          type: number
          x-go-type-skip-optional-pointer: true
          description: The seed associated with this image
          example: 1229191277
      example:
        - base64: ...very long string...
          finishReason: SUCCESS
          seed: 1050625087
        - base64: ...very long string...
          finishReason: CONTENT_FILTERED
          seed: 1229191277
    OrganizationMembership:
      type: object
      properties:
        id:
          type: string
          example: org-123456
          x-go-name: ID
        is_default:
          type: boolean
          example: false
        name:
          type: string
          example: My Organization
        role:
          type: string
          example: MEMBER
      required:
        - id
        - name
        - role
        - is_default
  parameters:
    upscaleEngineID:
      in: path
      name: engine_id
      required: true
      schema:
        type: string
      examples:
        ESRGAN_X2_PLUS:
          description: ESRGAN x2 Upscaler
          value: esrgan-v1-x2plus
    engineID:
      examples:
        default:
          value: stable-diffusion-v1-6
          description: Stable Diffusion v1.6
        stable-diffusion-xl-1024-v1-0:
          value: stable-diffusion-xl-1024-v1-0
          description: Stable Diffusion XL v1.0
      in: path
      name: engine_id
      required: true
      schema:
        type: string
    organization:
      allowEmptyValue: false
      description: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
      example: org-123456
      in: header
      name: Organization
      x-go-name: OrganizationID
      schema:
        type: string
    stabilityClientID:
      allowEmptyValue: false
      description: Used to identify the source of requests, such as the client application or sub-organization. Optional, but recommended for organizational clarity.
      example: my-great-plugin
      in: header
      name: Stability-Client-ID
      schema:
        type: string
    stabilityClientVersion:
      allowEmptyValue: false
      description: Used to identify the version of the application or service making the requests. Optional, but recommended for organizational clarity.
      example: 1.2.1
      in: header
      name: Stability-Client-Version
      schema:
        type: string
    accept:
      allowEmptyValue: false
      in: header
      name: Accept
      description: The format of the response.  Leave blank for JSON, or set to 'image/png' for a PNG image.
      schema:
        default: application/json
        enum:
          - application/json
          - image/png
        type: string
  securitySchemes:
    STABILITY_API_KEY:
      type: apiKey
      name: authorization
      in: header
      description: Use your [Stability API key](https://platform.stability.ai/account/keys) to authentication requests to this App.
  responses:
    '401':
      description: 'unauthorized: API key missing or invalid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            id: 9160aa70-222f-4a36-9eb7-475e2668362a
            name: unauthorized
            message: missing authorization header
    '403':
      description: 'permission_denied: You lack the necessary permissions to perform this action'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            id: 5cf19777-d17f-49fe-9bd9-39ff0ec6bb50
            name: permission_denied
            message: You do not have permission to access this resource
    '404':
      description: 'not_found: The requested resource/engine was not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            id: 92b19e7f-22a2-4e71-a821-90edda229293
            name: not_found
            message: The specified engine (ID some-fake-engine) was not found.
    '500':
      description: 'server_error: Some unexpected server error occurred'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            id: f81964d6-619b-453e-97bc-9fd7ac3f04e7
            name: server_error
            message: An unexpected server error occurred, please try again.
    GenerationResponse:
      description: Generation successful.
      content:
        application/json:
          schema:
            description: An array of results from the generation request, where each image is a base64 encoded PNG.
            type: object
            properties:
              artifacts:
                type: array
                x-go-type-skip-optional-pointer: true
                items:
                  $ref: '#/components/schemas/Image'
        image/png:
          example: The bytes of the generated image, what did you expect?
          schema:
            description: The bytes of the generated PNG image
            format: binary
            type: string
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Finish-Reason:
          $ref: '#/components/headers/Finish-Reason'
        Seed:
          $ref: '#/components/headers/Seed'
    400FromGeneration:
      description: 'bad_request: one or more parameters were invalid.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            id: 296a972f-666a-44a1-a3df-c9c28a1f56c0
            name: bad_request
            message: 'init_image: is required'
    400FromUpscale:
      description: One or more parameters were invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            id: 296a972f-666a-44a1-a3df-c9c28a1f56c0
            name: bad_request
            message: 'image: is required'
  headers:
    Content-Length:
      required: true
      schema:
        type: integer
    Content-Type:
      required: true
      schema:
        enum:
          - application/json
          - image/png
        type: string
    Finish-Reason:
      schema:
        $ref: '#/components/schemas/FinishReason'
    Seed:
      example: 3817857576
      schema:
        example: 787078103
        type: integer
      description: The seed used to generate the image.  This header is only present when the `Accept` is set to `image/png`.  Otherwise it is returned in the response body.
x-tagGroups:
  - name: Stable Image
    tags:
      - Generate
      - Upscale
      - Edit
      - Control
      - Results
  - name: Audio
    tags:
      - Stable Audio 2.0
  - name: 3D & Video
    tags:
      - 3D
      - Image-to-Video
  - name: Version 1
    tags:
      - SDXL 1.0 & SD1.6
      - Engines
      - User
